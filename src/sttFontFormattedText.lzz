/// Lookup Hint
struct sttfont_lookupHint {
	unsigned int index;
	unsigned int workingLen;
	int workingX, workingY;		// Working values to do with X and Y stuff. Meaning changes based on the context
	uint32_t uCharLast;
	bool writeOut;				// If true, this will be updated after calling getIndexAt
	sttfont_lookupHint() : index(0), workingLen(0), workingX(0), workingY(0), uCharLast(0), writeOut(false) {}
	};

/// Formatted text
struct sttfont_format_callback {
	virtual void callbackOnDraw(const sttfont_formatted_text & text, int index, int x, int y, int xOffsetInitial, int xOffsetAfter, int segmentWidth, int segmentHeight) {}
	};
	
// Include file for sttfont_font

struct sttfont_format_reset {};
struct sttfont_format {
	uint8_t r,g,b,a;
	uint8_t format;
	uint8_t flags;
	uint16_t padding;	// align to 64 bits
	static const uint8_t FORMAT_NONE 		  = 0 << 0;
	static const uint8_t FORMAT_BOLD 		  = 1 << 0;
	static const uint8_t FORMAT_ITALIC 		  = 1 << 1;
	static const uint8_t FORMAT_UNDERLINE 	  = 1 << 2;
	static const uint8_t FORMAT_STRIKETHROUGH = 1 << 3;
	static const uint8_t FORMAT_RENDER_EVEN_IF_CALLBACK_EXISTS = 1 << 7;
	
	static const uint8_t FORMAT_FLAGS_COLOUR_SET 	   = 1 << 0;
	
	inline sttfont_format() : r(255), g(255), b(255), a(255), format(0), flags(0), padding(0) {}
	inline sttfont_format(const uint8_t _format)
					: r(255), g(255), b(255), a(255), format(_format), flags(0), padding(0) {}
	inline sttfont_format(const uint8_t _format, const uint8_t _r, const uint8_t _g, const uint8_t _b, const uint8_t _a = 255)
					: r(_r), g(_g), b(_b), a(_a), format(_format), flags(FORMAT_FLAGS_COLOUR_SET), padding(0) {}
					
	inline bool operator == (const sttfont_format & other) const { // use default operator
		return (r == other.r) && (g == other.g) && (b == other.b) && (a == other.a) && (format == other.format) && (flags == other.flags);
		}
	
	void combine(const sttfont_format & other) {
		format |= other.format;
		flags |= other.flags;
		r = 255*((r/255.0)*(other.r/255.0));
		g = 255*((g/255.0)*(other.g/255.0));
		b = 255*((b/255.0)*(other.b/255.0));
		a = 255*((a/255.0)*(other.a/255.0));
		}
	
	// Constants and "constants"
	static sttfont_format color (const uint8_t _r, const uint8_t _g, const uint8_t _b, const uint8_t _a = 255) { sttfont_format ret(FORMAT_NONE,_r,_g,_b,_a); ret.flags |= FORMAT_FLAGS_COLOUR_SET; return ret; }
	static sttfont_format colour(const uint8_t _r, const uint8_t _g, const uint8_t _b, const uint8_t _a = 255) { sttfont_format ret(FORMAT_NONE,_r,_g,_b,_a); ret.flags |= FORMAT_FLAGS_COLOUR_SET; return ret; }
	
	static const sttfont_format bold = sttfont_format(FORMAT_BOLD);
	static const sttfont_format italic = sttfont_format(FORMAT_ITALIC);
	static const sttfont_format underline = sttfont_format(FORMAT_UNDERLINE);
	static const sttfont_format strikethrough = sttfont_format(FORMAT_STRIKETHROUGH);
	// If you don't like the colours, extend this class and define your own
	static const sttfont_format red 	= sttfont_format(FORMAT_NONE,255,  0,  0,255);
	static const sttfont_format green	= sttfont_format(FORMAT_NONE,  0,255,  0,255);
	static const sttfont_format blue 	= sttfont_format(FORMAT_NONE,  0,  0,255,255);
	static const sttfont_format yellow 	= sttfont_format(FORMAT_NONE,255,255,  0,255);
	static const sttfont_format black 	= sttfont_format(FORMAT_NONE,  0,  0,  0,255);
	static const sttfont_format white	= sttfont_format(FORMAT_NONE,255,255,255,255);
	static const sttfont_format magenta	= sttfont_format(FORMAT_NONE,255,  0,255,255);
	static const sttfont_format cyan	= sttfont_format(FORMAT_NONE,  0,255,255,255);
	static const sttfont_format grey	= sttfont_format(FORMAT_NONE,128,128,128,255);
	
	static const sttfont_format light_red 		= sttfont_format(FORMAT_NONE,255,  128,  128,255);
	static const sttfont_format light_green		= sttfont_format(FORMAT_NONE,  128,255,  128,255);
	static const sttfont_format light_blue 		= sttfont_format(FORMAT_NONE,  128,  128,255,255);
	static const sttfont_format light_yellow	= sttfont_format(FORMAT_NONE,255,255,  128,255);
	static const sttfont_format light_black 	= sttfont_format(FORMAT_NONE,  128,  128,  128,255);
	static const sttfont_format light_white		= sttfont_format(FORMAT_NONE,255,255,255,255);
	static const sttfont_format light_magenta	= sttfont_format(FORMAT_NONE,255,  128,255,255);
	static const sttfont_format light_cyan		= sttfont_format(FORMAT_NONE,  128,255,255,255);
	static const sttfont_format light_grey		= sttfont_format(FORMAT_NONE,192,192,192,255);
	
	static const sttfont_format dark_red 		= sttfont_format(FORMAT_NONE,128,  0,  0,255);
	static const sttfont_format dark_green		= sttfont_format(FORMAT_NONE,  0,128,  0,255);
	static const sttfont_format dark_blue 		= sttfont_format(FORMAT_NONE,  0,  0,128,255);
	static const sttfont_format dark_yellow		= sttfont_format(FORMAT_NONE,128,128,  0,255);
	static const sttfont_format dark_black 		= sttfont_format(FORMAT_NONE,  0,  0,  0,255);
	static const sttfont_format dark_white		= sttfont_format(FORMAT_NONE,128,128,128,255);
	static const sttfont_format dark_magenta	= sttfont_format(FORMAT_NONE,128,  0,128,255);
	static const sttfont_format dark_cyan		= sttfont_format(FORMAT_NONE,  0,128,128,255);
	static const sttfont_format dark_grey		= sttfont_format(FORMAT_NONE,64,64,64,255);
	
	const static int COLOUR_MODE_NORMAL = 0;
	const static int COLOUR_MODE_DARKEN = 1;
	const static int COLOUR_MODE_LIGHTEN = 2;
	
	static const sttfont_format& selectColour(const int colourMode, const sttfont_format& colourIf0, const sttfont_format& colourIf1, const sttfont_format& colourIf2) {
		if (colourMode == 1) return colourIf1;
		if (colourMode == 2) return colourIf2;
		return colourIf0;
		}
	
	static const sttfont_format_reset reset;
	
	void swap(sttfont_format & other) {
		sttfont_format tmp = *this;
		*this = other;
		other = tmp;
		}
		
	static void sttr_register() {
		#ifdef STTR_ENABLED
		// Reflection stuff - see snappertt/sttr on github for more info. You don't need STTR to use this library
		sttr::RegNamespace & R = *sttr::getGlobalNamespace();
		R.beginClass<sttfont_format>("sttfont_format")
			.STTR_REGF(sttfont_format,r,STTR_JSON_ENABLED)
			.STTR_REGF(sttfont_format,g,STTR_JSON_ENABLED)
			.STTR_REGF(sttfont_format,b,STTR_JSON_ENABLED)
			.STTR_REGF(sttfont_format,a,STTR_JSON_ENABLED)
			.STTR_REGF(sttfont_format,format,STTR_JSON_ENABLED)
			.STTR_REGF(sttfont_format,flags,STTR_JSON_ENABLED)
			
			.STTR_REG(sttfont_format,combine)
			
			.STTR_REG(sttfont_format,color)
			.STTR_REG(sttfont_format,colour)
			.STTR_REG(sttfont_format,bold)
			.STTR_REG(sttfont_format,italic)
			.STTR_REG(sttfont_format,underline)
			.STTR_REG(sttfont_format,strikethrough)
			
			.STTR_REG(sttfont_format,red)
			.STTR_REG(sttfont_format,green)
			.STTR_REG(sttfont_format,blue)
			.STTR_REG(sttfont_format,yellow)
			.STTR_REG(sttfont_format,black)
			.STTR_REG(sttfont_format,white)
			.STTR_REG(sttfont_format,magenta)
			.STTR_REG(sttfont_format,cyan)
			.STTR_REG(sttfont_format,grey)
			
			.STTR_REG(sttfont_format,light_red)
			.STTR_REG(sttfont_format,light_green)
			.STTR_REG(sttfont_format,light_blue)
			.STTR_REG(sttfont_format,light_yellow)
			.STTR_REG(sttfont_format,light_black)
			.STTR_REG(sttfont_format,light_white)
			.STTR_REG(sttfont_format,light_magenta)
			.STTR_REG(sttfont_format,light_cyan)
			.STTR_REG(sttfont_format,light_grey)
			
			.STTR_REG(sttfont_format,dark_red)
			.STTR_REG(sttfont_format,dark_green)
			.STTR_REG(sttfont_format,dark_blue)
			.STTR_REG(sttfont_format,dark_yellow)
			.STTR_REG(sttfont_format,dark_black)
			.STTR_REG(sttfont_format,dark_white)
			.STTR_REG(sttfont_format,dark_magenta)
			.STTR_REG(sttfont_format,dark_cyan)
			.STTR_REG(sttfont_format,dark_grey)
			
			.STTR_REG(sttfont_format,COLOUR_MODE_NORMAL)
			.STTR_REG(sttfont_format,COLOUR_MODE_DARKEN)
			.STTR_REG(sttfont_format,COLOUR_MODE_LIGHTEN)
			.STTR_REG(sttfont_format,selectColour)
			
			.STTR_REG(sttfont_format,reset)
		.endClass();
		#endif
		}
	STTFONT_STTR_CLASS_SIG_NON_POLY(sttfont_format)
	
	};
	
struct sttfont_formatted_text_item {
	SSF_STRING text;
	sttfont_format format;
	sttfont_format_callback * callback;
	sttfont_formatted_text_item () : callback(0) {}
	sttfont_formatted_text_item (const SSF_STRING & _text, const sttfont_format & _format)	: text(_text), format(_format), callback(0) {}
	sttfont_formatted_text_item (SSF_STRING_MS _text, const sttfont_format & _format) 		: text(_text), format(_format), callback(0) {}
	sttfont_formatted_text_item& setCallback(sttfont_format_callback* _cb) { callback = _cb; return *this; }
	
	static void sttr_register() {
		#ifdef STTR_ENABLED
		sttr::RegNamespace & R = *sttr::getGlobalNamespace();
		R.beginClass<sttfont_formatted_text_item>("sttfont_formatted_text_item")
			.STTR_REGF(sttfont_formatted_text_item,text,STTR_JSON_ENABLED)
			.STTR_REGF(sttfont_formatted_text_item,format,STTR_JSON_ENABLED)
		.endClass();
		#endif
		}
	STTFONT_STTR_CLASS_SIG_NON_POLY(sttfont_formatted_text_item)
	};

struct sttfont_formatted_uipair {
	unsigned int a,b;
	static void sttr_register() {
		#ifdef STTR_ENABLED
		sttr::RegNamespace & R = *sttr::getGlobalNamespace();
		R.beginClass<sttfont_formatted_uipair>("sttfont_formatted_uipair")
			.STTR_REGF(sttfont_formatted_uipair,a,STTR_JSON_ENABLED)
			.STTR_REGF(sttfont_formatted_uipair,b,STTR_JSON_ENABLED)
		.endClass();
		#endif
		}
	STTFONT_STTR_CLASS_SIG_NON_POLY(sttfont_formatted_text_item)
	};

struct sttfont_formatted_text {
	SSF_VECTOR<sttfont_formatted_text_item> mItems;
	sttfont_format activeFormat;
	
	// Normal constructors
	sttfont_formatted_text(){}
	sttfont_formatted_text(const sttfont_formatted_text & obj) { mItems = std::move(obj.mItems); activeFormat = std::move(obj.activeFormat); };
	sttfont_formatted_text(const SSF_STRING & text) { *this << text; }
	sttfont_formatted_text(SSF_STRING_MS text) 		{ *this << text; }
	sttfont_formatted_text(const char * text) 		{ *this << text; }
	sttfont_formatted_text(const char * text, const uint32_t maxLen) { appendCBuff(text, maxLen); }
	
	sttfont_formatted_text(sttfont_formatted_text_item_MS text)			{ *this << text; }
	sttfont_formatted_text(const sttfont_formatted_text_item & text)	{ *this << text; }
	sttfont_formatted_text(sttfont_formatted_text_MS obj){ mItems = std::move(obj.mItems); activeFormat = std::move(obj.activeFormat); }
		
	sttfont_formatted_text& operator = (sttfont_formatted_text_MS obj){ mItems = std::move(obj.mItems); activeFormat = std::move(obj.activeFormat); return *this; }
	sttfont_formatted_text& operator = (const sttfont_formatted_text & obj){ mItems = obj.mItems; activeFormat = obj.activeFormat; return *this; }
	void resetFormat() { activeFormat = sttfont_format(); }
	sttfont_formatted_text& operator << (const SSF_STRING & text) 	{ mItems.push_back(sttfont_formatted_text_item(text, activeFormat)); resetFormat(); return *this; }
	sttfont_formatted_text& operator << (SSF_STRING_MS text) 		{ mItems.push_back(sttfont_formatted_text_item(text, activeFormat)); resetFormat(); return *this;  }
	sttfont_formatted_text& operator << (const char * text) 		{ mItems.push_back(sttfont_formatted_text_item(SSF_STRING(text), activeFormat)); resetFormat(); return *this;  }
	sttfont_formatted_text& operator += (const SSF_STRING & text) 	{ mItems.push_back(sttfont_formatted_text_item(text, activeFormat)); resetFormat(); return *this; }
	sttfont_formatted_text& operator += (SSF_STRING_MS text) 		{ mItems.push_back(sttfont_formatted_text_item(text, activeFormat)); resetFormat(); return *this;  }
	sttfont_formatted_text& operator += (const char * text) 			{ mItems.push_back(sttfont_formatted_text_item(SSF_STRING(text), activeFormat)); resetFormat(); return *this;  }
	sttfont_formatted_text& operator << (const sttfont_format & format) 		{ activeFormat.combine(format); return *this; }
	sttfont_formatted_text& operator << (const sttfont_format_reset & reset) 	{ resetFormat(); return *this; }
	sttfont_formatted_text& operator << (const sttfont_formatted_text_item & obj) { mItems.push_back(obj); return *this; }
	sttfont_formatted_text& operator << (sttfont_formatted_text_item_MS obj) 	{ mItems.push_back(obj); return *this; }
	sttfont_formatted_text& appendCBuff(const char * text, const uint32_t maxLen) {
		if (maxLen == uint32_t(-1)) { *this << text; return *this; }
		const char* p = text;
		while (*p) p++;
		uint32_t len = (p - text);
		if (len > maxLen) len = maxLen;
		*this << SSF_STRING(text, len);
		return *this;
		}

	static void sttr_register() {
		#ifdef STTR_ENABLED
		#define STTR_REGF_ALIAS(C,X,A,F) regField<C,decltype(&C::X),F>(&C::X,#A).setUserFlags(F)
		
		sttr::RegNamespace & R = *sttr::getGlobalNamespace();
		R.beginClass<sttfont_formatted_text>("sttfont_formatted_text")
			.STTR_REGF(sttfont_formatted_text,mItems,STTR_JSON_ENABLED)
			.STTR_REGF(sttfont_formatted_text,activeFormat,STTR_JSON_ENABLED)
			.STTR_REGF(sttfont_formatted_text,copy,0)
			.STTR_REGF(sttfont_formatted_text,size,0)
			.STTR_REGF(sttfont_formatted_text,length,0)
			.STTR_REGF(sttfont_formatted_text,isEmpty,0)
			.STTR_REGF(sttfont_formatted_text,getString,0)
			.STTR_REGF(sttfont_formatted_text,getStringTruncated,0)
			.STTR_REGF(sttfont_formatted_text,append_luasafe,0)
			.STTR_REGF(sttfont_formatted_text,clear,0)
			.STTR_REGF(sttfont_formatted_text,setColour,0)
			.STTR_REGF(sttfont_formatted_text,consolidateSegments,0)
			.STTR_REGF(sttfont_formatted_text,back,0)
			.STTR_REGF_ALIAS(sttfont_formatted_text,getIndexAt_luasafe,getIndexAt,0)
			.STTR_REGF_ALIAS(sttfont_formatted_text,utf8_charsizeAt_luasafe,utf8_charsizeAt,0)
			.STTR_REGF_ALIAS(sttfont_formatted_text,insert_luasafe,insert,0)
			.STTR_REGF_ALIAS(sttfont_formatted_text,remove_luasafe,remove,0)
			.STTR_REGF_ALIAS(sttfont_formatted_text,substr_luasafe,substr,0)
			.STTR_REGF_ALIAS(sttfont_formatted_text,extract_luasafe,extract,0)
			.STTR_REGF_ALIAS(sttfont_formatted_text,tokenise_luasafe,tokenise,0)
		.endClass();
		#undef STTR_REGF_ALIAS
		#endif
		}
	STTFONT_STTR_CLASS_SIG_NON_POLY(sttfont_formatted_text)
	
	sttfont_formatted_text copy() const {
		// Explicit copy - named function
		sttfont_formatted_text r = *this;
		return r;
		}
		
	void swap(sttfont_formatted_text & other) {
		other.mItems.swap(mItems);
		other.activeFormat.swap(activeFormat);
		}
		
	size_t size() const {
		/// Combined length of all the segments
		size_t workingLen = 0;
		for (unsigned int  i = 0; i < mItems.size(); ++i ) {
			workingLen += mItems[i].text.size();
			}
		return workingLen;
		}
	size_t length() const { return size(); }
	
	bool isEmpty() const {
		/// Returns true if there are no segments, or there are only empty segments
		/// Ie, returns true if this contains no characters
		if (!mItems.size()) return true;
		//if (mItems.size() == 1) return !mItems[0].text.size();
		for (sttfont_formatted_text_item item : mItems)
			if (item.text.size()) return false;
		return true; // none of the elements have text
		}
		
	SSF_STRING getString() const {
		/// Returns a plain unformatted string of all the segments stitched together
		SSF_STRING r;
		r.reserve(size());
		for (unsigned int  i = 0; i < mItems.size(); ++i ) {
			r += mItems[i].text;
			}
		return r;
		}
		
	SSF_STRING getStringTruncated(const unsigned int maxLen) const {
		/// Returns a plain unformatted string of all the segments stitched together, cut to max len
		SSF_STRING r;
		r.reserve(size());
		for (unsigned int  i = 0; i < mItems.size(); ++i ) {
			r += mItems[i].text;
			if (r.size() > maxLen) {
				if (maxLen > 3)
					return r.substr(0, maxLen-3)+"...";
				return r.substr(0, maxLen);
				}
			}
		return r;
		}
		
	void append_luasafe(const sttfont_formatted_text & obj) {
		if (obj.mItems.size() == 1 && mItems.size()) {
			if (mItems[mItems.size()-1].format == obj.mItems[0].format) {
				mItems[mItems.size()-1].text += obj.mItems[0].text;
				return;
				}
			}
		mItems.insert(mItems.end(), obj.mItems.begin(), obj.mItems.end());
		activeFormat = obj.activeFormat;
		}
		
	inline void append(const sttfont_formatted_text & obj) { return append_luasafe(obj); }
	
	void append(sttfont_formatted_text_MS obj) {
		if (obj.mItems.size() == 1 && mItems.size()) {
			if (mItems[mItems.size()-1].format == obj.mItems[0].format) {
				mItems[mItems.size()-1].text += std::move(obj.mItems[0].text);
				return;
				}
			}
		mItems.insert(mItems.end(), std::make_move_iterator(obj.mItems.begin()), std::make_move_iterator(obj.mItems.end()));
		activeFormat = obj.activeFormat;
		}
		
	void clear() {
		*this = sttfont_formatted_text();
		}

	void setColour(const sttfont_format & fmt) {
		/// If any pieces do not have their colour set, set the colour to fmt's colour
		for (sttfont_formatted_text_item & sfti : mItems) {
			if (!(sfti.format.flags & sttfont_format::FORMAT_FLAGS_COLOUR_SET)) {
				uint8_t nfmt  = fmt.format | sfti.format.format;
				uint8_t nflg  = fmt.flags;
				sfti.format = fmt;
				sfti.format.format = nfmt;
				sfti.format.flags  = nflg;
				}
			}
		}
		
	void consolidateSegments() {
		/// "Cleans" up this object by merging adjacent items if they have
		/// the same format, and removes empty segments
		
		// Strip empty segments
		for (unsigned int  i = mItems.size() - 1; i < mItems.size(); --i ) {
			if (!mItems[i].text.size())
				mItems.erase(mItems.begin() + i + 1);
			}
		size_t szStart;
		size_t szEnd;
		do {
			szStart = mItems.size();
			consolidateSegments_worker();
			szEnd = mItems.size();
			}
		while (szEnd < szStart);
		}

protected:
	void consolidateSegments_worker() {
		/// "Cleans" up this object by merging adjacent items if they have the same format
		/// Removes empty segments
		for (unsigned int  i = mItems.size() - 2; i < mItems.size(); --i ) {
			if (mItems[i].format == mItems[i+1].format) {
				mItems[i].text += mItems[i+1].text;
				mItems.erase(mItems.begin() + i + 1);
				}
			}
		
		}
		
public:
	
	bool back(const unsigned int num) {
		/// Removes @num bytes from the end of this
		/// Returns true if changed
		unsigned int nToRemove = num;
		for (unsigned int  i = mItems.size() - 1; i < mItems.size(); --i ) {
			if ( mItems[i].text.size() <= nToRemove) {
				nToRemove -= mItems[i].text.size();
				mItems.erase(mItems.begin() + i);
				if (nToRemove == 0 || i == 0) {
					return true;
					}
				}
			else {
				SSF_STRING& s = mItems[i].text;
				s = s.erase(s.length()-nToRemove);
				return true;
				}
			}
		return false;
		}
		
		
	sttfont_formatted_uipair getIndexAt_luasafe(const unsigned int position, sttfont_lookupHint * mHint) const {
		sttfont_formatted_uipair r;
		getIndexAt(position, r.a, r.b, mHint);
		return r;
		}
	
	void getIndexAt(const unsigned int position, unsigned int& indexOut, unsigned int& localPosOut, sttfont_lookupHint * mHint = NULL) const {
		/// Returns the segment index and position within the segment of a character position
		/// A hint can be used to prevent itterating over the whole thing
		/// Hint is updated if mHint->writeOut is true
		indexOut = -1;
		localPosOut = -1;
		
		unsigned int start = 0;		
		unsigned int workingLen = 0;
		
		if (mHint) {
			if (position >= mHint->workingLen) {
				start = mHint->index;
				workingLen = mHint->workingLen;
				}
			else {
				// Uncomment below to test for useless hints
				//std::cout << "Hint is useless!: " << position << " " << mHint->workingLen << std::endl;
				}
			}
		
		for (unsigned int  i = start; i < mItems.size(); ++i ) {
			if (mItems[i].text.size() + workingLen > position && workingLen <= position) {
				indexOut = i;
				localPosOut = position - workingLen;
				
				if (mHint) {
					if (mHint->writeOut) {
						mHint->index = i;
						mHint->workingLen = workingLen;
						}
					}
				
				return;
				}
			workingLen += mItems[i].text.size();
			}
		}
		
	sttfont_formatted_uipair utf8_charsizeAt_luasafe(const unsigned int position, sttfont_lookupHint * mHint) {
		sttfont_formatted_uipair r;
		utf8_charsizeAt(position, r.a, r.b, mHint);
		return r;
		}
		
	void utf8_charsizeAt(const unsigned int position, unsigned int & posOut, unsigned int & sizeOut, sttfont_lookupHint * mHint = NULL) {
		/// At @position, what is the character size? Returns this in @sizeOut
		/// If this is in the middle of a character, return the position of the start of the character in @posOut
		posOut = position;
		sizeOut = 0;
		
		unsigned int index, offset;
		getIndexAt(position, index, offset, mHint);
		if (index >= mItems.size()) return; // not found
		
		// Lookup to 3 characters back and get the charSize
		for (unsigned int lookup = 0; lookup <= offset;) {
			int thisSz = sttfont_font_cache::utf8_charsize(&mItems[index].text[lookup]);
			
			//std::cout << "Lookup utf8_charsizeAt " << lookup << " " << thisSz
			//		<< " char[" << mItems[index].text.substr(lookup, thisSz) << "] " << offset << std::endl;
			
			if (thisSz + lookup > offset) {				
				//std::cout << "Out! size: " << thisSz << std::endl;
				posOut = lookup + position - offset;
				sizeOut = thisSz;
				return;
				}
			if (thisSz)
				lookup += thisSz;
			else
				lookup++;
			}
		}
		
	void insert(const unsigned int position, const SSF_STRING & str, sttfont_lookupHint * mHint = NULL) {
		/// Inserts @str at character position @pos
		unsigned int index, offset;
		getIndexAt(position, index, offset, mHint);
		if (index >= mItems.size()) { *this << str; return; } // not found, append to end
		mItems[index].text.insert(offset, str);
		}
		
	void insert(const unsigned int position, SSF_STRING_MS str, sttfont_lookupHint * mHint = NULL) {
		/// Inserts @str at character position @pos. Moving version
		unsigned int index, offset;
		getIndexAt(position, index, offset, mHint);
		if (index >= mItems.size()) { *this << std::move(str); return; } // not found, append to end
		mItems[index].text.insert(offset, std::move(str));
		}
		
	void insert_luasafe(const unsigned int position, const sttfont_formatted_text & str, sttfont_lookupHint * mHint) {
		/// Inserts @str at character position @pos. Copying formatted text version
		if (str.mItems.size() == 0) return;
		unsigned int index, offset;
		getIndexAt(position, index, offset, mHint);
		if (index >= mItems.size()) { append(str); return; } // not found, append to end

		if (str.mItems.size() == 1) { // Quickie - only 1 format being inserted. Do not split
			if (mItems[index].format == str.mItems[0].format) {
				mItems[index].text.insert(offset, str.mItems[0].text); return;
				}
			}
			
		sttfont_formatted_text_item after = mItems[index];	
		mItems[index].text.erase(offset);
		after.text.erase(0, offset);	
		
		unsigned int strSz = str.mItems.size();
		mItems.insert(mItems.begin()+index+1, str.mItems.begin(), str.mItems.end());
		
		if (after.text.length())
			mItems.insert(mItems.begin()+index+1+strSz, std::move(after));
		}
	inline void insert(const unsigned int position, const sttfont_formatted_text & str, sttfont_lookupHint * mHint = NULL) { insert_luasafe(position, str, mHint); }
		
	void insert(const unsigned int position, sttfont_formatted_text_MS str, sttfont_lookupHint * mHint = NULL) {
		/// Inserts @str at character position @pos. Moving version
		if (str.mItems.size() == 0) return;
		unsigned int index, offset;
		getIndexAt(position, index, offset, mHint);
		if (index >= mItems.size()) { append(std::move(str)); return; } // not found, append to end
		
		if (str.mItems.size() == 1) { // Quickie - only 1 format being inserted. Do not split
			if (mItems[index].format == str.mItems[0].format) {
				mItems[index].text.insert(offset, std::move(str.mItems[0].text)); return;
				}
			}
			
		sttfont_formatted_text_item after = mItems[index];	
		mItems[index].text.erase(offset);
		after.text.erase(0, offset);	
		
		unsigned int strSz = str.mItems.size();
		mItems.insert(mItems.begin()+index+1, std::make_move_iterator(str.mItems.begin()), std::make_move_iterator(str.mItems.end()));
		
		if (after.text.length())
			mItems.insert(mItems.begin()+index+1+strSz, std::move(after));
		}
		

	void remove_luasafe(const unsigned int position, const unsigned int num, sttfont_lookupHint * mHint) {
		/// Removes @num characters after position num
		/// Note that if you're using hints that they might be invalid after removing text
		unsigned int index, offset;
		getIndexAt(position, index, offset, mHint);
		if (index >= mItems.size()) return; // not found
		
		unsigned int numToRemove = num;
		
		for (unsigned int i = index; i < mItems.size(); ++i) {
			unsigned int nToRemove = mItems[i].text.size() - offset;
			if (nToRemove > numToRemove) nToRemove = numToRemove;
			
			if (nToRemove == mItems[i].text.size() && offset == 0) {
				mItems.erase(mItems.begin() + i);
				--i;
				return;
				}
			mItems[i].text.erase(offset, nToRemove);
			
			numToRemove -= nToRemove;
			offset = 0;
			}
			
		}
		
	inline void remove(const unsigned int position, const unsigned int num, sttfont_lookupHint * mHint = NULL) { remove_luasafe(position, num, mHint); }
	
	SSF_STRING substr(const unsigned int position, const unsigned int num, sttfont_lookupHint * mHint = NULL) const {
		/// Reads @num characters after @position. If num goes past the end of a string
		/// then returns the end of the string. Returns as a plain string
		/// To get a "formatted" substr use this->extract(position, num);
		SSF_STRING r;
		unsigned int index, offset;
		getIndexAt(position, index, offset, mHint);
		if (index >= mItems.size()) return r; // not found
		
		unsigned int numToRemove = num;
		
		for (unsigned int i = index; i < mItems.size(); ++i) {
			unsigned int nToRemove = mItems[i].text.size() - offset;
			if (nToRemove > numToRemove) nToRemove = numToRemove;
			
			r += mItems[i].text.substr(offset, nToRemove);
			
			numToRemove -= nToRemove;
			offset = 0;
			}
		return r;
		}
	inline SSF_STRING substr_luasafe(const unsigned int position, const unsigned int num, sttfont_lookupHint * mHint) const {
		return substr(position, num, mHint);
		}
		
	sttfont_formatted_text extract(const unsigned int position, const unsigned int num, sttfont_lookupHint * mHint = NULL) const {
		/// Creates a new @sttfont_formatted_text containing the segments starting at character @position and of length @num in bytes
		/// To get a std::string substring use this->substr(position, num)
		sttfont_formatted_text r;
		
		unsigned int index, offset;
		getIndexAt(position, index, offset, mHint);
		if (index >= mItems.size()) {
			return r;
			}
			
		unsigned int numToRemove = num;
		
		for (unsigned int i = index; i < mItems.size() && numToRemove; ++i) {
			unsigned int nToRemove = mItems[i].text.size() - offset;
			if (nToRemove > numToRemove) nToRemove = numToRemove;
			
			//std::cout << "extracting: " << i << " " << " offset: " << offset << ", nToRemove: " << nToRemove << "/" << numToRemove << " " << mItems[i].text.size() << std::endl;
			
			if (nToRemove == mItems[i].text.size() && offset == 0) {
				r.mItems.push_back(mItems[i]);
				}
			else {
				sttfont_formatted_text_item sfti;
				sfti.format = mItems[i].format;
				sfti.text = mItems[i].text.substr(offset, nToRemove);
				r.mItems.push_back(std::move(sfti));
				}
			//r += mItems[i].text.substr(offset, nToRemove);
			
			numToRemove -= nToRemove;
			offset = 0;
			}
		return r;
		}
	inline sttfont_formatted_text extract_luasafe(const unsigned int position, const unsigned int num, sttfont_lookupHint * mHint) const { return extract(position, num, mHint); }
		
	void tokenise (SSF_VECTOR<sttfont_formatted_text> & arrOut, const uint32_t delimiter, const bool checkQuoteMarks = true, const uint32_t escapeChar = '\\', const bool includeDelimiterInToken = false) const {
		/// Breaks this into an array of sttfont_formatted_text objects
		/// tokenised by "delimter" (unless inbetween two `"` marks).
		/// An escape character negates the delimiter
		/// Handles UTF-8
		///
		/// Example usage - tokenise on newlines:
		///     vector<sttfont_formatted_text> output;
		///     input.tokenise(output, '\n', true, '\\');
		///
		const sttfont_formatted_text & stringIn = *this;
		
		bool open = false;
		bool escape = false;
		
		uint32_t segmentStart = 0;	// The start of the working token
		uint32_t workingPos = 0;	// The cumulative positon along the string
		uint32_t offset = 0;		// A small offset to prevent including the token character in the extracted strings
		
		uint32_t workingPosLastStart = 0;
		uint32_t siLastStart = 0;
		
		uint32_t delimiterSize = 1;
		if (delimiter > 0x007F) delimiterSize = 2;
		if (delimiter > 0x07FF) delimiterSize = 3;
		if (delimiter > 0xFFFF) delimiterSize = 4;
		
		for (size_t si = 0; si < stringIn.mItems.size(); ++si) {
			const SSF_STRING & s = stringIn.mItems[si].text;
			uint32_t seek = 0;
			const uint32_t len = s.length();
			
			while (seek < len) {
				const uint32_t seekBefore = seek;
				uint32_t uChar = sttfont_font_cache::utf8_read(&s[seek], seek, len);
				
				if (escape) {
					escape = false;
					continue;
					}
			
				if (uChar == escapeChar) {
					// Add the next charcter in regardless
					escape = true;
					continue;
					}
				if (uChar != delimiter || open) {
					if (uChar != '"' || !checkQuoteMarks) {
						// No-op
						}
					else {
						open = !open;
						}
					}
				else {
					sttfont_lookupHint mHint;
						mHint.index = siLastStart;
						mHint.workingLen = workingPosLastStart;
						
					if (includeDelimiterInToken)
						workingPos+=delimiterSize;
						
					workingPosLastStart = workingPos;
					siLastStart = si;
					
					sttfont_formatted_text d = stringIn.extract(segmentStart + offset, (workingPos + seekBefore) - segmentStart - offset, &mHint);
					segmentStart = workingPos + seekBefore;
					offset = sttfont_font_cache::utf8_charsize(uChar); // Used to skip including the newline
					arrOut.push_back(std::move(d));
					}
				}
			workingPos += len;
			}
		
		sttfont_lookupHint mHint;
			mHint.index = siLastStart;
			mHint.workingLen = workingPosLastStart;
		sttfont_formatted_text d = stringIn.extract(segmentStart + offset, -1, &mHint);
		arrOut.push_back(std::move(d));
		}
			
	inline void tokenise_luasafe (SSF_VECTOR<sttfont_formatted_text>* arrOut, const uint32_t delimiter, const bool checkQuoteMarks, const uint32_t escapeChar, const bool includeDelimiterInToken) const {
		return tokenise(*arrOut, delimiter, checkQuoteMarks, escapeChar, includeDelimiterInToken);
		}
	};
	
