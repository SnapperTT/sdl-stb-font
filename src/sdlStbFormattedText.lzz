
/// Formatted text
struct sdl_stb_format_callback {
	virtual void callbackOnDraw(const sdl_stb_formatted_text & text, int index, int x, int y, int xOffsetInitial, int xOffsetAfter, int segmentWidth, int segmentHeight) {}
	};
	
// Include file for sdl_stb_font

struct sdl_stb_format_reset {};
struct sdl_stb_format {
	uint8_t r,g,b,a;
	uint8_t format;
	static const uint8_t FORMAT_NONE 		  = 0 << 0;
	static const uint8_t FORMAT_BOLD 		  = 1 << 0;
	static const uint8_t FORMAT_ITALIC 		  = 1 << 1;
	static const uint8_t FORMAT_UNDERLINE 	  = 1 << 2;
	static const uint8_t FORMAT_STRIKETHROUGH = 1 << 3;
	static const uint8_t FORMAT_RENDER_EVEN_IF_CALLBACK_EXISTS = 1 << 7;
	
	sdl_stb_format() : r(255), g(255), b(255), a(255), format(0) {}
	sdl_stb_format(const uint8_t _format, const uint8_t _r = 255, const uint8_t _g = 255, const uint8_t _b = 255, const uint8_t _a = 255)
					: r(_r), g(_g), b(_b), a(_a), format(_format) {}
	
	void combine(const sdl_stb_format & other) {
		format |= other.format;
		r = 255*((r/255.0)*(other.r/255.0));
		g = 255*((g/255.0)*(other.g/255.0));
		b = 255*((b/255.0)*(other.b/255.0));
		a = 255*((a/255.0)*(other.a/255.0));
		}
	
	// Constants and "constants"
	static sdl_stb_format color(const uint8_t _r, const uint8_t _g, const uint8_t _b, const uint8_t _a = 255) { return sdl_stb_format(FORMAT_NONE,_r,_g,_b,_a); }
	static sdl_stb_format colour(const uint8_t _r, const uint8_t _g, const uint8_t _b, const uint8_t _a = 255) { return sdl_stb_format(FORMAT_NONE,_r,_g,_b,_a); }
	
	static const sdl_stb_format bold = sdl_stb_format(FORMAT_BOLD);
	static const sdl_stb_format italic = sdl_stb_format(FORMAT_ITALIC);
	static const sdl_stb_format underline = sdl_stb_format(FORMAT_UNDERLINE);
	static const sdl_stb_format strikethrough = sdl_stb_format(FORMAT_STRIKETHROUGH);
	// If you don't like the colours, extend this class and define your own
	static const sdl_stb_format red 	= sdl_stb_format(FORMAT_NONE,255,  0,  0,255);
	static const sdl_stb_format green	= sdl_stb_format(FORMAT_NONE,  0,255,  0,255);
	static const sdl_stb_format blue 	= sdl_stb_format(FORMAT_NONE,  0,  0,255,255);
	static const sdl_stb_format yellow 	= sdl_stb_format(FORMAT_NONE,255,255,  0,255);
	static const sdl_stb_format black 	= sdl_stb_format(FORMAT_NONE,  0,  0,  0,255);
	static const sdl_stb_format white	= sdl_stb_format(FORMAT_NONE,255,255,255,255);
	static const sdl_stb_format magenta	= sdl_stb_format(FORMAT_NONE,255,  0,255,255);
	static const sdl_stb_format cyan	= sdl_stb_format(FORMAT_NONE,  0,255,255,255);
	static const sdl_stb_format grey	= sdl_stb_format(FORMAT_NONE,128,128,128,255);
	
	static const sdl_stb_format_reset reset;
	};
	
struct sdl_stb_formated_text_item {
	SSF_STRING text;
	sdl_stb_format format;
	sdl_stb_format_callback * callback;
	sdl_stb_formated_text_item () : callback(0) {}
	sdl_stb_formated_text_item (const SSF_STRING & _text, const sdl_stb_format & _format)	: text(_text), format(_format), callback(0) {}
	sdl_stb_formated_text_item (SSF_STRING_MS _text, const sdl_stb_format & _format) 		: text(_text), format(_format), callback(0) {}
	sdl_stb_formated_text_item& setCallback(sdl_stb_format_callback* _cb) { callback = _cb; return *this; }
	};
	
struct sdl_stb_formatted_text {
	SSF_VECTOR<sdl_stb_formated_text_item> mItems;
	sdl_stb_format activeFormat;
	
	sdl_stb_formatted_text(){}
	sdl_stb_formatted_text(const SSF_STRING & text) { *this << text; }
	sdl_stb_formatted_text(SSF_STRING_MS text) 		{ *this << text; }
	sdl_stb_formatted_text(const char * text) 		{ *this << text; }
	void resetFormat() { activeFormat = sdl_stb_format(); }
	sdl_stb_formatted_text& operator << (const SSF_STRING & text) 	{ mItems.push_back(sdl_stb_formated_text_item(text, activeFormat)); resetFormat(); return *this; }
	sdl_stb_formatted_text& operator << (SSF_STRING_MS text) 		{ mItems.push_back(sdl_stb_formated_text_item(text, activeFormat)); resetFormat(); return *this;  }
	sdl_stb_formatted_text& operator << (const char * text) 		{ mItems.push_back(sdl_stb_formated_text_item(SSF_STRING(text), activeFormat)); resetFormat(); return *this;  }
	sdl_stb_formatted_text& operator << (const sdl_stb_format & format) 		{ activeFormat.combine(format); return *this; }
	sdl_stb_formatted_text& operator << (const sdl_stb_format_reset & reset) 	{ resetFormat(); return *this; }
	sdl_stb_formatted_text& operator << (const sdl_stb_formated_text_item & obj) { mItems.push_back(obj); return *this; }
	sdl_stb_formatted_text& operator << (sdl_stb_formated_text_item_MS obj) 	{ mItems.push_back(obj); return *this; }
	};
