#hdr
// SdlStbFont example
// By Liam Twigger - 2020
// Public Domain

struct SDL_Renderer;
struct SDL_Texture;
struct SDL_Surface;

#ifndef STB_TRUETYPE_INCLUDE_HANDLED
	////////////////////////////////////////
	// STB TRUETYPE 
	// Handle double-including
	#ifdef STB_TRUETYPE_IMPLEMENTATION
		#undef STB_TRUETYPE_IMPLEMENTATION
	#endif
	#include "stb_truetype.h"
	////////////////////////////////////////
#endif

// Defines
#ifndef SSF_MAP
	#include <map>
	#define SSF_MAP std::map
#endif
#ifndef SSF_VECTOR
	#include <vector>
	#define SSF_VECTOR std::vector
#endif
#ifndef SSF_STRING
	#include <string>
	#define SSF_STRING std::string
#endif


// new and delete macros
// all calls in this library are done with "foo * f = SSF_NEW(f)"
// implement your custom allocator by defining SSF_NEW and SSF_DEL
#ifndef SSF_NEW
	#define SSF_NEW(X) new X
#endif
#ifndef SSF_NEW_ARR
	#define SSF_NEW_ARR(X,S) new X[S]
#endif
#ifndef SSF_DEL
	#define SSF_DEL(X) delete X
#endif
#ifndef SSF_DEL_ARR
	#define SSF_DEL_ARR(X) delete[] X
#endif


#include <cstdint>

// move semantics - makes lzz happy
#define SSF_STRING_MS SSF_STRING&&
#define sdl_stb_formated_text_item_MS sdl_stb_formated_text_item&&

// misc
#ifdef INT32_MIN
	#define SSF_INT_MIN  INT32_MIN
#else
	#define SSF_INT_MIN 0x8000000;
#endif
struct sdl_stb_formatted_text;
#end

#src
#include <stdio.h>

#ifndef STB_TRUETYPE_INCLUDE_HANDLED
	////////////////////////////////////////
	// STB TRUETYPE 
	#define STB_TRUETYPE_IMPLEMENTATION
	#include <math.h>
	#include <string.h>
	#include <assert.h>
	#include <stdlib.h>
	#include "stb_truetype.h"
	////////////////////////////////////////
#endif

#include <SDL2/SDL.h>

#end

/// Formatted text
struct sdl_stb_format_callback {
	virtual void callbackOnDraw(const sdl_stb_formatted_text & text, int index, int x, int y, int xOffsetInitial, int xOffsetAfter, int segmentWidth, int segmentHeight) {}
	};
	
struct sdl_stb_format_reset {};
struct sdl_stb_format {
	uint8_t r,g,b,a;
	uint8_t format;
	static const uint8_t FORMAT_NONE 		  = 0 << 0;
	static const uint8_t FORMAT_BOLD 		  = 1 << 0;
	static const uint8_t FORMAT_ITALIC 		  = 1 << 1;
	static const uint8_t FORMAT_UNDERLINE 	  = 1 << 2;
	static const uint8_t FORMAT_STRIKETHROUGH = 1 << 3;
	static const uint8_t FORMAT_RENDER_EVEN_IF_CALLBACK_EXISTS = 1 << 7;
	
	sdl_stb_format() : r(255), g(255), b(255), a(255), format(0) {}
	sdl_stb_format(const uint8_t _format, const uint8_t _r = 255, const uint8_t _g = 255, const uint8_t _b = 255, const uint8_t _a = 255)
					: r(_r), g(_g), b(_b), a(_a), format(_format) {}
	
	void combine(const sdl_stb_format & other) {
		format |= other.format;
		r = 255*((r/255.0)*(other.r/255.0));
		g = 255*((g/255.0)*(other.g/255.0));
		b = 255*((b/255.0)*(other.b/255.0));
		a = 255*((a/255.0)*(other.a/255.0));
		}
	
	// Constants and "constants"
	static sdl_stb_format color(const uint8_t _r, const uint8_t _g, const uint8_t _b, const uint8_t _a = 255) { return sdl_stb_format(_r,_g,_b,_a); }
	static sdl_stb_format colour(const uint8_t _r, const uint8_t _g, const uint8_t _b, const uint8_t _a = 255) { return sdl_stb_format(_r,_g,_b,_a); }
	
	static const sdl_stb_format bold = sdl_stb_format(FORMAT_BOLD);
	static const sdl_stb_format italic = sdl_stb_format(FORMAT_ITALIC);
	static const sdl_stb_format underline = sdl_stb_format(FORMAT_UNDERLINE);
	static const sdl_stb_format strikethrough = sdl_stb_format(FORMAT_STRIKETHROUGH);
	// If you don't like the colours, extend this class and define your own
	static const sdl_stb_format red 	= sdl_stb_format(FORMAT_NONE,255,  0,  0,255);
	static const sdl_stb_format green	= sdl_stb_format(FORMAT_NONE,  0,255,  0,255);
	static const sdl_stb_format blue 	= sdl_stb_format(FORMAT_NONE,  0,  0,255,255);
	static const sdl_stb_format yellow 	= sdl_stb_format(FORMAT_NONE,255,255,  0,255);
	static const sdl_stb_format black 	= sdl_stb_format(FORMAT_NONE,  0,  0,  0,255);
	static const sdl_stb_format white	= sdl_stb_format(FORMAT_NONE,255,255,255,255);
	static const sdl_stb_format magenta	= sdl_stb_format(FORMAT_NONE,255,  0,255,255);
	static const sdl_stb_format cyan	= sdl_stb_format(FORMAT_NONE,  0,255,255,255);
	static const sdl_stb_format grey	= sdl_stb_format(FORMAT_NONE,128,128,128,255);
	
	static const sdl_stb_format_reset reset;
	};
	
struct sdl_stb_formated_text_item {
	SSF_STRING text;
	sdl_stb_format format;
	sdl_stb_format_callback * callback;
	sdl_stb_formated_text_item () : callback(0) {}
	sdl_stb_formated_text_item (const SSF_STRING & _text, const sdl_stb_format & _format)	: text(_text), format(_format), callback(0) {}
	sdl_stb_formated_text_item (SSF_STRING_MS _text, const sdl_stb_format & _format) 		: text(_text), format(_format), callback(0) {}
	sdl_stb_formated_text_item& setCallback(sdl_stb_format_callback* _cb) { callback = _cb; return *this; }
	};
	
struct sdl_stb_formatted_text {
	SSF_VECTOR<sdl_stb_formated_text_item> mItems;
	sdl_stb_format activeFormat;
	
	sdl_stb_formatted_text(){}
	sdl_stb_formatted_text(const SSF_STRING & text) { *this << text; }
	sdl_stb_formatted_text(SSF_STRING_MS text) 		{ *this << text; }
	sdl_stb_formatted_text(const char * text) 		{ *this << text; }
	void resetFormat() { activeFormat = sdl_stb_format(); }
	sdl_stb_formatted_text& operator << (const SSF_STRING & text) 	{ mItems.push_back(sdl_stb_formated_text_item(text, activeFormat)); resetFormat(); return *this; }
	sdl_stb_formatted_text& operator << (SSF_STRING_MS text) 		{ mItems.push_back(sdl_stb_formated_text_item(text, activeFormat)); resetFormat(); return *this;  }
	sdl_stb_formatted_text& operator << (const char * text) 		{ mItems.push_back(sdl_stb_formated_text_item(SSF_STRING(text), activeFormat)); resetFormat(); return *this;  }
	sdl_stb_formatted_text& operator << (const sdl_stb_format & format) 		{ activeFormat.combine(format); return *this; }
	sdl_stb_formatted_text& operator << (const sdl_stb_format_reset & reset) 	{ resetFormat(); return *this; }
	sdl_stb_formatted_text& operator << (const sdl_stb_formated_text_item & obj) { mItems.push_back(obj); return *this; }
	sdl_stb_formatted_text& operator << (sdl_stb_formated_text_item_MS obj) 	{ mItems.push_back(obj); return *this; }
	};

	
/// Prerended cached text
struct sdl_stb_prerendered_text {
	SDL_Texture * mSdlTexture;
	int width, height;
	
	sdl_stb_prerendered_text () : mSdlTexture(NULL), width(0), height(0) {}
	
	void freeTexture () {
		if (mSdlTexture)
			SDL_DestroyTexture(mSdlTexture);
		mSdlTexture = NULL;
		}
	
	/// Draws this prerendered text object, returns the x coordinate
	/// at the end of the drawing
	int draw (SDL_Renderer * mRenderer, const int x, const int y) {
		SDL_Rect r;
		r.x = x;
		r.y = y;
		r.w = width;
		r.h = height;
		SDL_RenderCopy(mRenderer, mSdlTexture, NULL, &r);
		return r.x + r.w;
		}
		
	int drawWithColorMod(SDL_Renderer * mRenderer, const int x, const int y, const uint8_t r, const uint8_t g, const uint8_t b, const uint8_t a = 255) {
		SDL_SetTextureColorMod(mSdlTexture, r, g, b);
		if (a != 255)
			SDL_SetTextureAlphaMod(mSdlTexture, a);
		return draw (mRenderer, x, y);
		}
	};
	
/// Memory management
struct sdl_stb_memory {
	char * data;
	bool ownsData;
	
	void alloc(const size_t size) {
		data = SSF_NEW_ARR(char, size);
		ownsData = true;
		}
		
	void transferTo(sdl_stb_memory & destination) {
		destination.data = data;
		destination.ownsData = destination.data;
		ownsData = false;
		}
	
	sdl_stb_memory () : data(NULL), ownsData(false) {}
	~sdl_stb_memory () {
		if (ownsData) {
			SSF_DEL_ARR(data);
			data = NULL;
			}
		}
	};

/// A glyph
struct sdl_stb_glyph {
	SDL_Texture * mSdlTexture;
	SDL_Surface * mSdlSurface;
	int advance;
	int leftSideBearing;
	int width, height;
	int xOffset, yOffset;
	
	sdl_stb_glyph () : mSdlTexture(0), mSdlSurface(0), advance(0), leftSideBearing(0), width(0), height(0), xOffset(0), yOffset(0) {}
	};

/// Linked list of fonts. This is for font fallback purposes
struct sdl_stb_font_list {
	stbtt_fontinfo mFont;
	sdl_stb_memory mMemory;
	uint8_t format;			// Value is one of sdl_stb_format::FORMAT_*
	SSF_VECTOR<sdl_stb_font_list*> mFormatedVariants;	// Variants for bold, italic, etc
	sdl_stb_font_list * next;
		
	sdl_stb_font_list() : format(0), next(NULL) {}
	~sdl_stb_font_list() {
		for (sdl_stb_font_list * fl : mFormatedVariants)
			delete fl;
		if (next) delete next;
		}
	
	/// Finds the font with the code point for 
	void fetchFontForCodepoint(const uint32_t codepoint, const uint8_t format, stbtt_fontinfo ** mFontOut, int * indexOut) {
		sdl_stb_font_list * working = this;
		
		*mFontOut = NULL;
		*indexOut = 0;
		
		while (working) {
			int index = stbtt_FindGlyphIndex(&(working->mFont), codepoint);
			if (index) {
				// Check for format in the variants
				if (format) {
					int bestBitsCount = 0;
					sdl_stb_font_list * bestMatch = NULL;
					sdl_stb_font_list * bestMatch2 = NULL;
					for (sdl_stb_font_list * f : mFormatedVariants) {
						uint8_t mask = (format & f->format);
						if (mask) {
							int nBits = 0;
							for (int i = 0; i < 7; ++i)
								if (mask & (1 << i)) nBits++;
							if (nBits > bestBitsCount) {
								bestBitsCount = nBits;
								bestMatch2 = bestMatch;
								bestMatch = f;
								}
							}
						}
					
					if (bestMatch) {
						int index2 = stbtt_FindGlyphIndex(&(bestMatch->mFont), codepoint);
						*mFontOut = &(bestMatch->mFont);
						*indexOut = index2;
						return;
						}
					if (bestMatch2) {
						int index2 = stbtt_FindGlyphIndex(&(bestMatch2->mFont), codepoint);
						*mFontOut = &(bestMatch2->mFont);
						*indexOut = index2;
						return;
						}
					}
				
				// Format not found/no format
				*mFontOut = &(working->mFont);
				*indexOut = index;
				return;
				}
			working = working->next;
			}
		}
	};

/// Cache of a font
class sdl_stb_font_cache {
public:
	SDL_Renderer * mRenderer;
	sdl_stb_font_list mFont;
	// Read-only (for you!) parameters set by
	int ascent;
	int descent;
	int lineGap;
	int baseline;
	int rowSize;
	float scale;
	float underlineThickness;
	float strikethroughThickness;
	float underlinePosition;
	float strikethroughPosition;
	// The face size in pixels
	int faceSize;
	
	SSF_MAP<uint64_t, sdl_stb_glyph> mGlyphs;
	
	sdl_stb_font_cache () : mRenderer(NULL), ascent(0), descent(0), lineGap(0), baseline(0), rowSize(0), scale(1.f), faceSize(20),
		underlineThickness(1.0), strikethroughThickness(1.0), underlinePosition(0.0), strikethroughPosition(0.0) {}
	~sdl_stb_font_cache () {
		clearGlyphs();
		}
	
	void clearGlyphs () {
		for (auto & g : mGlyphs) {
			if (g.second.mSdlTexture) {
				SDL_DestroyTexture(g.second.mSdlTexture);
				g.second.mSdlTexture = NULL;
				}
			if (g.second.mSdlSurface) {
				SDL_FreeSurface(g.second.mSdlSurface);
				g.second.mSdlSurface = NULL;
				}
			}
		mGlyphs.clear();
		}
	
	/// Binds an SDL_Renderer for rendering
	/// Must be called before drawing any text
	void bindRenderer(SDL_Renderer * _mRenderer) {
		mRenderer = _mRenderer;
		}
	
	/// Sets the face size. Must be called BEFORE loading a font!
	void setFaceSize(const int _faceSize) { faceSize = _faceSize; }
	
	/// The size between rows, in the same coordinates as whatever you set faceSize as
	int getScaledRowSize () const { return scale * rowSize; }
	
	/// Loads the primary font
	/// Also computes font properties (ascent/decent/basline/scale/rowSize/etc)
	/// ttf_buffer must be null terminated
	void loadFont (const char * ttf_buffer, int index = 0) {
		stbtt_InitFont(&mFont.mFont, (const unsigned char *) ttf_buffer, stbtt_GetFontOffsetForIndex((const unsigned char *) ttf_buffer,index));
		stbtt_GetFontVMetrics(&mFont.mFont, &ascent, &descent, &lineGap);
		
		scale = stbtt_ScaleForPixelHeight(&mFont.mFont, faceSize);
		baseline = ascent*scale;
		rowSize = ascent - descent + lineGap;
		
		strikethroughThickness = faceSize/20.0;
		if (strikethroughThickness < 1) strikethroughThickness = 1;
		strikethroughPosition = baseline * 0.75 - strikethroughThickness/2;
		underlineThickness = strikethroughThickness;
		underlinePosition = baseline + underlineThickness;
		}
	
	/// Does the dame as loadFont, but transfers ownership of the memory to here
	/// ttf_buffer must be null terminated
	/// ttf_buffer will be deallocated when this class is destroyed
	/// Example usage:
	/// filep * file = openFile("path/to/file");
	/// sdl_stb_memory mem;
	/// mem.alloc(file_size);
	/// fread(file, &mem.data);
	/// mSdl_stb_font_cache.loadFontManaged (mem);
	/// You can safely let mem drop out of scope
	void loadFontManaged (sdl_stb_memory & memory, int index = 0) {
		memory.transferTo(mFont.mMemory);
		loadFont(mFont.mMemory.data, index);
		}
		
	/// Loads a fallback font. If a glyph is not found in a primary font it'll fallback to one of these
	/// ttf_buffer must be null terminated
	void addFont (const char * ttf_buffer, int index = 0) {
		addFontWrap afw(ttf_buffer);
		afw.index = index;
		addFont_worker(afw, false);
		}
		
	/// Same as addFont, but transfers ownership of the memory to here
	/// ttf_buffer will be deallocated when this class is destroyed
	/// ttf_buffer must be null terminated
	/// Example usage:
	/// filep * file = openFile("path/to/file");
	/// sdl_stb_memory mem;
	/// mem.alloc(file_size);
	/// fread(file, &mem.data);
	/// mSdl_stb_font_cache.loadFontManaged (mem);
	/// You can safely let mem drop out of scope
	void addFontManaged (sdl_stb_memory & memory, int index = 0) {
		addFontWrap afw(NULL);
		afw.memory = &memory;
		afw.index = index;
		addFont_worker(afw, false);
		}
	
	/// Adds a format variant to the last loaded font
	/// Use this to add Bold, Italic, etc
	/// FormatMask is one of sdl_stb_format::FORMAT_*
	void addFormatFont (uint8_t formatMask, const char * ttf_buffer, int index = 0) {
		addFontWrap afw(ttf_buffer);
		afw.index = index;
		addFont_worker(afw, true, formatMask);
		}
	
	void addFormatFontManaged (uint8_t formatMask, sdl_stb_memory & memory, int index = 0) {
		addFontWrap afw(NULL);
		afw.memory = &memory;
		afw.index = index;
		addFont_worker(afw, true, formatMask);
		}
		
		
protected:
	struct addFontWrap {
		const char * ttf_buffer;
		sdl_stb_memory * memory;
		int index;
		addFontWrap (const char * c) : ttf_buffer(c), memory(NULL), index(0) {}
		};
		
	void addFont_worker(addFontWrap & fwm, bool isFormatVariant, uint8_t formatMask = 0) { 
		sdl_stb_font_list * n = SSF_NEW(sdl_stb_font_list);
		sdl_stb_font_list * w = &mFont;
		while (w->next)
			w = w->next;
		n->format = formatMask;
		
		if (fwm.memory) {
			sdl_stb_memory & memory = *(fwm.memory);
			memory.transferTo(n->mMemory);
			stbtt_InitFont(&n->mFont, (const unsigned char *) n->mMemory.data, stbtt_GetFontOffsetForIndex((const unsigned char *) n->mMemory.data,fwm.index));
			}
		else {
			stbtt_InitFont(&n->mFont, (const unsigned char *) fwm.ttf_buffer, stbtt_GetFontOffsetForIndex((const unsigned char *) fwm.ttf_buffer,fwm.index));
			}
		if (isFormatVariant)
			w->mFormatedVariants.push_back(n);
		else
			w->next = n;
		}
public:

	/// For a given codepoint, generate a texture (if required) and populate the
	/// details of the glyph (width, height, etc) in gOut	
	void genGlyph (const uint32_t codepoint, const uint8_t format, sdl_stb_glyph * gOut) {
		// Fetch font and index - existance check for glyph in font
		stbtt_fontinfo * mFontContaining;
		int mIndex;
		mFont.fetchFontForCodepoint(codepoint, format, &mFontContaining, &mIndex);
		
		if (!mIndex)
			return;
		
		// found the font! generate the glyph
	   	unsigned char *bitmap;
	   	int w,h,woff,hoff;
		bitmap = stbtt_GetCodepointBitmap(mFontContaining, 0, scale, codepoint, &w, &h, &woff, &hoff);
		
        // Convert bitmap to RGBA
        unsigned int sz = w*h;
        unsigned char bitmap2[sz*4];
        for (unsigned int i = 0; i < sz; ++i) {
        	bitmap2[i*4+0] = 255;
        	bitmap2[i*4+1] = 255;
        	bitmap2[i*4+2] = 255;
        	bitmap2[i*4+3] = bitmap[i];
        	}
        
        stbtt_FreeBitmap (bitmap, 0);
        
        if (w && h) {
			gOut->mSdlSurface = SDL_CreateRGBSurfaceFrom(bitmap2, w, h, 32, 4*w, 0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
			gOut->mSdlTexture = SDL_CreateTextureFromSurface(mRenderer, gOut->mSdlSurface);
			}
		
		gOut->width = w;
		gOut->height = h;
		stbtt_GetCodepointHMetrics(mFontContaining, codepoint, &gOut->advance, &gOut->leftSideBearing);
		
		gOut->xOffset = woff;
		gOut->yOffset = hoff;
		
		}
	
	sdl_stb_glyph * getGlyph(const uint64_t target) {
		auto it = mGlyphs.find(target);
		if (it == mGlyphs.end())
			return NULL;
		return &((*it).second);
		}
	
	/// Looks up a glyph, generating it if it does not exist yet
	sdl_stb_glyph * getGenGlyph(const uint32_t codepoint, const uint8_t format) {
		uint64_t target = codepoint | (uint64_t(format) << 32);
		sdl_stb_glyph * r = getGlyph(target);
		if (r) return r;
		sdl_stb_glyph g;
		genGlyph(codepoint, format, &g);
		mGlyphs[target] = g;
		return getGlyph(target);
		}
		
	int getKerningAdvance(const uint32_t cp1, const uint32_t cp2) {
		return stbtt_GetCodepointKernAdvance(&mFont.mFont, cp1, cp2);
		}
	
	int utf8_charsize(const char* c) {
		if (!c) return 0;
		if ((uint8_t)*c <= 0x7F) return 1;
		else if ((uint8_t)*c <= 0xE0) return 2;
		else if ((uint8_t)*c <= 0xF0) return 3;
		else
			return 4;
		}
	
	/// Reads a utf8 codepoint from a string
	uint32_t utf8_read(const char* c, uint32_t & seek, const uint32_t maxLen) {
		if (!c) return 0;
		int chsz = utf8_charsize(c);
		seek += chsz;
	
		if (seek > maxLen) {
			return *c; //Buffer overflow - stop to be safe!
			}
			
		if (chsz == 1) return *c;		
		if (chsz == 2)
			return (((uint32_t((uint8_t) c[0] & 0b00111111) << 6)) | uint32_t((uint8_t) c[1] & 0b00111111));
		if (chsz == 3)
			return (uint32_t((uint8_t) c[0] & 0b00011111) << 12) | (uint32_t((uint8_t) c[1] & 0b00111111) << 6) | uint32_t((uint8_t) c[2] & 0b00111111);
		return (uint32_t((uint8_t) c[0] & 0b00001111) << 18) | (uint32_t((uint8_t) c[1] & 0b00111111) << 12) | (uint32_t((uint8_t) c[2] & 0b00111111) << 6) | uint32_t((uint8_t) c[3] & 0b00111111);
		}
	
	
	/// Draws a c string at position x, y
	/// maxLen should be set if you want to use non-zero terminated strings
	/// Returns the x coordinate of the caret at the end of the string
	/// (If you draw a 100 width string at x=5 this will return 105.
	/// If there is a newline at the end this will return 5) 
	int drawText(const int x, const int y, const char * c, const uint32_t maxLen = -1) {
		return processString(x, y, c, maxLen, NULL, true);
		}
	
	int drawText (const int x, const int y, const SSF_STRING & str) {
		return drawText(x,y,str.data(),str.size());
		}

	/// These overloads return the width and height of the drawn string
	int drawText(const int x, const int y, int & widthOut, int & heightOut, const char * c, const uint32_t maxLen = -1) {
		return processString(x, y, c, maxLen, NULL, true, &widthOut, &heightOut);
		}
	
	int drawText (const int x, const int y, const SSF_STRING & str, int & widthOut, int & heightOut) {
		return drawText(x,y,widthOut, heightOut, str.data(),str.size());
		}
		
	int drawText(const int x, const int y, const sdl_stb_formatted_text & text) {
		int dummyWidth, dummyHeight;
		return drawText(x, y, text, dummyWidth, dummyHeight);
		}
		
	int drawText(const int x, const int y, const sdl_stb_formatted_text & text, int & widthOut, int & heightOut) {
		return processFormatted(text, x, y, true, &widthOut, &heightOut);
		}
	
	/// Gets the size of a string (width and height). Returns the x position of the caret at the end of the string
	int getTextSize (int & w, int & h, const char * c, const uint32_t maxLen = -1) {
		return processString(0, 0, c, maxLen, NULL, false, &w, &h);
		}
		
	int getTextSize (int & w, int & h, const SSF_STRING & str) {
		return processString(0, 0, str.data(), str.size(), NULL, false, &w, &h);
		}
	int getTextSize (int & w, int & h, const sdl_stb_formatted_text & str) {
		return processFormatted(str, 0, 0, false, &w, &h);
		}
	
	/// Returns the number of rows (newlines + 1) a string has here
	int getNumberOfRows (const SSF_STRING & str) {
		int n = 1;
		for (const char c : str)
			if (c == '\n') n++;
		return n;
		}
	int getNumberOfRows (const sdl_stb_formatted_text & str) {
		int n = 1;
		for (const sdl_stb_formated_text_item & item : str.mItems) {
			for (const char c : item.text)
				if (c == '\n') n++;
			}
		return n;
		}

	/// Returns the height of string. This is much faster than getTextSize(), but only returns the height
	int getTextHeight (const SSF_STRING & str) {
		return scale*rowSize*getNumberOfRows(str);
		}
	int getTextHeight (const sdl_stb_formatted_text & str) {
		return scale*rowSize*getNumberOfRows(str);
		}
		
	int processString (const int x, const int y, const char* c, const uint32_t maxLen, const sdl_stb_format * const format, const bool isDrawing, int * const widthOut = NULL, int * const heightOut = NULL, const int * const threshX = NULL, const int * const threshY = NULL, int * const caretPosition = NULL, int initialXOffset = 0) {
		// Scan through function and extract the glyphs
		// returns the x position at the end
		uint32_t seek = 0;
		uint32_t uCharLast = 0;
		uint32_t uChar = utf8_read(c, seek, maxLen);
		int xx = x + initialXOffset;
		int overdraw = SSF_INT_MIN;
		int yy = y;
		if (widthOut) *widthOut = 0;
		if (heightOut) *heightOut = 0;
		bool hasNewlined = false;
		
		const bool lookupCaret = caretPosition && threshX && threshY;
		if (lookupCaret) {
			*caretPosition = -1;
			}
		
		while (uChar && seek <= maxLen) {
			int xxl = xx;
			if (uChar == '\n') {
				if (widthOut)
					if (*widthOut < xx) *widthOut = xx;
				hasNewlined = true;
				xx = x;
				yy += scale*rowSize;
				overdraw = SSF_INT_MIN;
				}
			else {
				int dx = scale*getKerningAdvance(uCharLast, uChar);
				xx += dx;
				processCodepoint(xx, yy, uChar, format, isDrawing, dx, overdraw);
				}
			
			if (lookupCaret) {
				//const int dx = xx - x;
				if (xx > *threshX && xxl <= *threshX ) {
					if (*threshX > xxl + (xx - xxl)/2)
						*caretPosition = seek; // right half of char
					else
						*caretPosition = seek-1; // left half of char
					return xx;
					}
				}
				
			uCharLast = uChar;
			uChar = utf8_read(c + seek, seek, maxLen);
			}
		if (widthOut) {
			if (*widthOut < xx) *widthOut = xx;
			*widthOut -= x;
			}
		if (heightOut) {
			if (*heightOut < yy) *heightOut = yy;
			*heightOut += scale*rowSize;
			*heightOut -= y;
			}
		return xx;
		}

	int processFormatted(const sdl_stb_formatted_text & text, int x, int y, const bool isDrawing, int * const widthOut = NULL, int * const heightOut = NULL, const int * const threshX = NULL, const int * const threshY = NULL, int * const caretPosition = NULL, int initialXOffset = 0) {
		int xOffset = initialXOffset;
		int yOffset = 0;
		
		if (widthOut) *widthOut = 0;
		if (heightOut) *heightOut = 0;
		
		for (unsigned int i = 0; i < text.mItems.size(); ++i) {
			const sdl_stb_formated_text_item & ssfti = text.mItems[i];
			
			bool isDrawingWorking = isDrawing;
			if (ssfti.callback && isDrawingWorking)
				isDrawingWorking = (ssfti.format.format & sdl_stb_format::FORMAT_RENDER_EVEN_IF_CALLBACK_EXISTS);
			
			int widthWorking, heightWorking;
			
			int xOffsetBefore = xOffset;
			xOffset = processString(x,y + yOffset, ssfti.text.data(), ssfti.text.size(), &ssfti.format, isDrawingWorking, &widthWorking, &heightWorking, threshX, threshY, caretPosition, xOffset); // color!!!
			
			xOffset -= x;
			yOffset += heightWorking - scale*rowSize;
			if (widthOut) *widthOut = *widthOut > widthWorking ? *widthOut : widthWorking;
			
			heightWorking = yOffset + scale*rowSize;
			if (heightOut) *heightOut = *heightOut > heightWorking ? *heightOut : heightWorking;
			
			if (ssfti.callback)
				ssfti.callback->callbackOnDraw(text, i, x, y, xOffsetBefore, xOffset, widthWorking, heightWorking);
			}
		return xOffset + x;
		}
	
	
	/// Returns the position in the string where a click happend
	/// MouseX and MouseY are relative to whatever draw position of this string you are using
	/// Currently only suppors single row strings
	int getCaretPos(const SSF_STRING & str, const int relMouseX, const int relMouseY) {
		int caretPosition = -1;
		processString(0,0, str.data(), str.length(), NULL, false, NULL, NULL, &relMouseX, &relMouseY, &caretPosition);
		return caretPosition;
		}
	int getCaretPos(const sdl_stb_formatted_text & str, const int relMouseX, const int relMouseY) {
		int caretPosition = -1;
		processFormatted(str, 0,0, false, NULL, NULL, &relMouseX, &relMouseY, &caretPosition);
		return caretPosition;
		}
	
	bool isTofu (sdl_stb_glyph * G) {
		if (!G) return true;
		if (!G->advance) return true; //unprintable characters have no width
		return false;
		}
	
	/// Returns either a glyph with a valid texture, or a tofu glyph with a valid texture or NULL
	sdl_stb_glyph * getGlyphOrTofu (const uint32_t codepoint, const uint8_t format) {
		sdl_stb_glyph * G = getGenGlyph(codepoint, format);
		if (!isTofu(G)) return G;
		
		G = getGenGlyph((uint32_t) 0xFFFD, format); // https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character
		if (!isTofu(G)) return G;
			
		G = getGenGlyph((uint32_t) '?', format);
		if (!isTofu(G)) return G;
		
		if (format)
			return getGlyphOrTofu(codepoint, 0);
		
		return NULL;
		}
	
	void processCodepoint (int & x, int & y, const uint32_t codepoint, const sdl_stb_format * const format, bool isDrawing, int kerningAdv, int & overdraw) {
		// Draws the character, advances x & y to the next position
		// NOTE: KErning
		uint8_t formatCode = 0;
		if (format)
			formatCode = format->format;
			
		sdl_stb_glyph * G = getGlyphOrTofu(codepoint, formatCode);
		if (!G) {
			x += faceSize/2;
			return;
			}
		if (isDrawing) {
			SDL_Rect r;
			r.x = x + G->xOffset;
			r.y = y + G->yOffset + baseline;
			r.w = G->width;
			r.h = G->height;
			
			if (G->mSdlTexture) {
				if (format) {
					int charAdv = kerningAdv + G->xOffset;
					bool isColoured = (format->r < 255) || (format->g < 255) || (format->b < 255);
					uint8_t cr,cg,cb,ca;
					if (isColoured || formatCode) {
						SDL_SetTextureColorMod(G->mSdlTexture, format->r, format->g, format->b);
						SDL_GetRenderDrawColor(mRenderer, &cr,&cg,&cb,&ca);
						SDL_SetRenderDrawColor(mRenderer, format->r, format->g, format->b, 0);
						// Remove bleeding pixels
						SDL_Rect r2;
						r2.x = r.x; r2.y = r.y;
						r2.w = r.w; r2.h = r.h;
						if (r2.x < overdraw) {
							int dx = overdraw - r2.x;
							r2.x += dx;
							r2.w -= dx;
							}
						overdraw = r.x + r.w;
						SDL_RenderFillRect(mRenderer, &r2); //TODO: prevent overlapping!
						}
					if (formatCode)
						SDL_SetRenderDrawColor(mRenderer, format->r, format->g, format->b, 255);
					SDL_RenderCopy(mRenderer, G->mSdlTexture, NULL, &r);
					
					if (formatCode & sdl_stb_format::FORMAT_STRIKETHROUGH) {
						SDL_Rect r2;
						r2.w = G->width+strikethroughThickness + charAdv; r2.h = strikethroughThickness;
						if (r2.h < 1) r2.h = 1;
						r2.x = r.x-strikethroughThickness/2 - charAdv; r2.y = y + strikethroughPosition;
						SDL_RenderFillRect (mRenderer, &r2);
						}
					if (formatCode & sdl_stb_format::FORMAT_UNDERLINE) {
						SDL_Rect r2;
						r2.w = G->width+underlineThickness + charAdv; r2.h = underlineThickness;
						if (r2.h < 1) r2.h = 1;
						r2.x = r.x-underlineThickness/2 - charAdv; r2.y = y + underlinePosition;
						SDL_RenderFillRect (mRenderer, &r2);
						}
					
					if (isColoured || formatCode) {
						SDL_SetRenderDrawColor(mRenderer, cr, cg, cb, ca);
						SDL_SetTextureColorMod(G->mSdlTexture, 255,255,255);
						}
					}
				else {
					overdraw = SSF_INT_MIN;
					SDL_RenderCopy(mRenderer, G->mSdlTexture, NULL, &r);
					}
				}
			}
		x += scale*G->advance;
		}
		
	/// Creates a SDL_Texture of a suitable size and renders an entire string to it
	SDL_Texture * renderTextToTexture (const char * c, const uint32_t maxLen = -1, int * widthOut = NULL, int * heightOut = NULL) {
		return renderTextToTexture_worker(NULL, c, maxLen, widthOut, heightOut);
		}
	SDL_Texture * renderTextToTexture (const sdl_stb_formatted_text & formatted, int * widthOut = NULL, int * heightOut = NULL) {
		return renderTextToTexture_worker(&formatted, NULL, -1, widthOut, heightOut);
		}
protected:
	SDL_Texture * renderTextToTexture_worker (const sdl_stb_formatted_text * formatted, const char * c, const uint32_t maxLen = -1, int * widthOut = NULL, int * heightOut = NULL) {
		int width, height;
		if (formatted)
			getTextSize(width, height, *formatted);
		else
			getTextSize(width, height, c, maxLen);
		
		SDL_Texture * RT = SDL_CreateTexture(mRenderer, SDL_PIXELFORMAT_RGBA8888,SDL_TEXTUREACCESS_TARGET, width, height);
		SDL_SetRenderTarget(mRenderer, RT);
		SDL_SetTextureBlendMode(RT, SDL_BLENDMODE_NONE);
		SDL_SetRenderDrawColor(mRenderer, 255, 255, 255, 0); // Must be the same colour as the text
		// Fill RT with blank pixels. SDL_RenderClear will leave artefacts in SDL Software mode
		SDL_Rect r;
		r.x = 0; r.y = 0;
		r.w = width; r.h = height;
		SDL_RenderFillRect (mRenderer, &r); // Must be rendered with a fill rect
		
		SDL_SetTextureBlendMode(RT, SDL_BLENDMODE_BLEND);
		if (formatted)
			drawText(0, 0, *formatted);
		else
			drawText(0, 0, c, maxLen);
		
		SDL_SetRenderTarget(mRenderer, NULL);
		
		*widthOut = width;
		*heightOut = height;
		return RT;
		}
public:
	SDL_Texture * renderTextToTexture (const SSF_STRING & str, int * widthOut = NULL, int * heightOut = NULL) {
		return renderTextToTexture(str.data(), str.length(), widthOut, heightOut);
		}
	
	/// Same as renderTextToTexture, but stores the result in an object that has a convienent 
	void renderTextToObject (sdl_stb_prerendered_text * textOut, const char * c, const uint32_t maxLen = -1) {
		textOut->mSdlTexture = renderTextToTexture(c, maxLen, &(textOut->width), &(textOut->height));
		}
	void renderTextToObject (sdl_stb_prerendered_text * textOut, const SSF_STRING & str) {
		textOut->mSdlTexture = renderTextToTexture(str, &(textOut->width), &(textOut->height));
		}
	void renderTextToObject (sdl_stb_prerendered_text * textOut, const sdl_stb_formatted_text & str) {
		textOut->mSdlTexture = renderTextToTexture(str, &(textOut->width), &(textOut->height));
		}
	
	
	}

