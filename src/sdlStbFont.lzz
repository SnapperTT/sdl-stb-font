#hdr
// SdlStbFont example
// By Liam Twigger - 2020
// Public Domain

struct SDL_Renderer;
struct SDL_Texture;
struct SDL_Surface;

#ifndef STB_TRUETYPE_INCLUDE_HANDLED
	////////////////////////////////////////
	// STB TRUETYPE 
	// Handle double-including
	#ifdef STB_TRUETYPE_IMPLEMENTATION
		#undef STB_TRUETYPE_IMPLEMENTATION
	#endif
	#include "stb_truetype.h"
	////////////////////////////////////////
#endif
	
#include <cstdint>
#include <map>
#end

#src
#include <stdio.h>

#ifndef STB_TRUETYPE_INCLUDE_HANDLED
	////////////////////////////////////////
	// STB TRUETYPE 
	#define STB_TRUETYPE_IMPLEMENTATION
	#include <math.h>
	#include <string.h>
	#include <assert.h>
	#include <stdlib.h>
	#include "stb_truetype.h"
	////////////////////////////////////////
#endif

#include <SDL2/SDL.h>

#end

struct sdl_stb_prerendered_text {
	SDL_Texture * mSdlTexture;
	int width, height;
	
	sdl_stb_prerendered_text () : mSdlTexture(NULL), width(0), height(0) {}
	
	void freeTexture () {
		if (mSdlTexture)
			SDL_DestroyTexture(mSdlTexture);
		mSdlTexture = NULL;
		}
		
	void draw (SDL_Renderer * mRenderer, const int x, const int y) {
		SDL_Rect r;
		r.x = x;
		r.y = y;
		r.w = width;
		r.h = height;
		SDL_RenderCopy(mRenderer, mSdlTexture, NULL, &r);
		}
		
	void drawWithColorMod(SDL_Renderer * mRenderer, const int x, const int y, const uint8_t r, const uint8_t g, const uint8_t b, const uint8_t a = 255) {
		SDL_SetTextureColorMod(mSdlTexture, r, g, b);
		if (a != 255)
			SDL_SetTextureAlphaMod(mSdlTexture, a);
		draw (mRenderer, x, y);
		}
	}

/// A glyph
struct sdl_stb_glyph {
	SDL_Texture * mSdlTexture;
	SDL_Surface * mSdlSurface;
	int advance;
	int leftSideBearing;
	int width, height;
	int xOffset, yOffset;
	
	sdl_stb_glyph () : mSdlTexture(0), mSdlSurface(0), advance(0), leftSideBearing(0), width(0), height(0), xOffset(0), yOffset(0) {}
	}

/// Linked list of fonts. This is for font fallback purposes
struct sdl_stb_font_list {
	stbtt_fontinfo mFont;
	sdl_stb_font_list * next;
	
	sdl_stb_font_list() : next(NULL) {}
	~sdl_stb_font_list() {
		if (next) delete next;
		}
	
	/// Finds the font with the code point for 
	void fetchFontForCodepoint(const uint32_t codepoint, stbtt_fontinfo ** mFontOut, int * indexOut) {
		sdl_stb_font_list * working = this;
		
		*mFontOut = NULL;
		*indexOut = 0;
		
		while (working) {
			int index = stbtt_FindGlyphIndex(&(working->mFont), codepoint);
			if (index) {
				*mFontOut = &(working->mFont);
				*indexOut = index;
				return;
				}
			working = working->next;
			}
		}
	
	}

/// Cache of a font
class sdl_stb_font_cache {
public:
	SDL_Renderer * mRenderer;
	sdl_stb_font_list mFont;
	// Read-only (for you!) parameters set by
	int ascent;
	int descent;
	int lineGap;
	int baseline;
	int rowSize;
	float scale;
	// The face size in pixels
	int faceSize;
	
	std::map<uint32_t, sdl_stb_glyph> mGlyphs;
	
	sdl_stb_font_cache () : mRenderer(NULL), ascent(0), descent(0), lineGap(0), rowSize(0), faceSize(20), scale(1.f) {}
	~sdl_stb_font_cache () {
		clearGlyphs();
		}
	
	void clearGlyphs () {
		for (auto & g : mGlyphs) {
			if (g.second.mSdlTexture) {
				SDL_DestroyTexture(g.second.mSdlTexture);
				g.second.mSdlTexture = NULL;
				}
			if (g.second.mSdlSurface) {
				SDL_FreeSurface(g.second.mSdlSurface);
				g.second.mSdlSurface = NULL;
				}
			}
		mGlyphs.clear();
		}
	
	/// Binds an SDL_Renderer for rendering
	/// Must be called before drawing any text
	void bindRenderer(SDL_Renderer * _mRenderer) {
		mRenderer = _mRenderer;
		}
	
	/// Sets the face size. Must be called BEFORE loading a font!
	void setFaceSize(const int _faceSize) { faceSize = _faceSize; }
	
	/// Loads the primary font
	/// Also computes font properties (
	void loadFont (const char * ttf_buffer, int index = 0) {
		stbtt_InitFont(&mFont.mFont, (const unsigned char *) ttf_buffer, stbtt_GetFontOffsetForIndex((const unsigned char *) ttf_buffer,index));
		stbtt_GetFontVMetrics(&mFont.mFont, &ascent, &descent, &lineGap);
		
		scale = stbtt_ScaleForPixelHeight(&mFont.mFont, faceSize);
		baseline = ascent*scale;
		rowSize = ascent - descent + lineGap;
		}
		
	/// Loads a fallback font. If a glyph is not found in a primary font it'll fallback to one of these
	void addFont (const char * ttf_buffer, int index = 0) {
		sdl_stb_font_list * n = new sdl_stb_font_list;
		sdl_stb_font_list * w = &mFont;
		while (w->next)
			w = w->next;
		
		stbtt_InitFont(&n->mFont, (const unsigned char *) ttf_buffer, stbtt_GetFontOffsetForIndex((const unsigned char *) ttf_buffer,index));
		w->next = n;
		}
	
	/// For a given codepoint, generate a texture (if required) and populate the
	/// details of the glyph (width, height, etc) in gOut	
	void genGlyph (const uint32_t codepoint, sdl_stb_glyph * gOut) {
		// Fetch font and index - existance check for glyph in font
		stbtt_fontinfo * mFontContaining;
		int mIndex;
		mFont.fetchFontForCodepoint(codepoint, &mFontContaining, &mIndex);
		
		if (!mIndex)
			return;
		
		// found the font! generate the glyph
	   	unsigned char *bitmap;
	   	int w,h,woff,hoff;
		bitmap = stbtt_GetCodepointBitmap(mFontContaining, 0, scale, codepoint, &w, &h, &woff, &hoff);
		
        // Convert bitmap to RGBA
        unsigned int sz = w*h;
        unsigned char bitmap2[sz*4];
        for (unsigned int i = 0; i < sz; ++i) {
        	bitmap2[i*4+0] = 255;
        	bitmap2[i*4+1] = 255;
        	bitmap2[i*4+2] = 255;
        	bitmap2[i*4+3] = bitmap[i];
        	}
        
        stbtt_FreeBitmap (bitmap, 0);
        
        if (w && h) {
			gOut->mSdlSurface = SDL_CreateRGBSurfaceFrom(bitmap2, w, h, 32, 4*w, 0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
			gOut->mSdlTexture = SDL_CreateTextureFromSurface(mRenderer, gOut->mSdlSurface);
			}
		
		gOut->width = w;
		gOut->height = h;
		stbtt_GetCodepointHMetrics(mFontContaining, codepoint, &gOut->advance, &gOut->leftSideBearing);
		
		gOut->xOffset = woff;
		gOut->yOffset = hoff;
		
		}
	
	sdl_stb_glyph * getGlyph(const uint32_t codepoint) {
		auto it = mGlyphs.find(codepoint);
		if (it == mGlyphs.end())
			return NULL;
		return &((*it).second);
		}
	
	/// Looks up a glyph, generating it if it does not exist yet
	sdl_stb_glyph * getGenGlyph(const uint32_t codepoint) {
		sdl_stb_glyph * r = getGlyph(codepoint);
		if (r) return r;
		sdl_stb_glyph g;
		genGlyph(codepoint, &g);
		mGlyphs[codepoint] = g;
		return getGlyph(codepoint);
		}
		
	int getKerningAdvance(const uint32_t cp1, const uint32_t cp2) {
		return stbtt_GetCodepointKernAdvance(&mFont.mFont, cp1, cp2);
		}
	
	int utf8_charsize(const char* c) {
		if (!c) return 0;
		if ((uint8_t)*c <= 0x7F) return 1;
		else if ((uint8_t)*c <= 0xE0) return 2;
		else if ((uint8_t)*c <= 0xF0) return 3;
		else
			return 4;
		}
	
	/// Reads a utf8 codepoint from a string
	uint32_t utf8_read(const char* c, uint32_t & seek, const uint32_t maxLen) {
		if (!c) return 0;
		int chsz = utf8_charsize(c);
		seek += chsz;
	
		if (seek > maxLen) {
			return *c; //Buffer overflow - stop to be safe!
			}
			
		if (chsz == 1) return *c;		
		if (chsz == 2)
			return (((uint32_t((uint8_t) c[0] & 0b00111111) << 6)) | uint32_t((uint8_t) c[1] & 0b00111111));
		if (chsz == 3)
			return (uint32_t((uint8_t) c[0] & 0b00011111) << 12) | (uint32_t((uint8_t) c[1] & 0b00111111) << 6) | uint32_t((uint8_t) c[2] & 0b00111111);
		return (uint32_t((uint8_t) c[0] & 0b00001111) << 18) | (uint32_t((uint8_t) c[1] & 0b00111111) << 12) | (uint32_t((uint8_t) c[2] & 0b00111111) << 6) | uint32_t((uint8_t) c[3] & 0b00111111);
		}
	
	
	/// Draws a c string at position x, y
	/// maxLen should be set if you want to use non-zero terminated strings
	void drawText(const int x, const int y, const char * c, const uint32_t maxLen = -1) {
		processString(x, y, c, maxLen, true);
		}
	
	void drawText (const int x, const int y, const std::string & str) {
		drawText(x,y,str.data(),str.size());
		}
	
	/// Gets the size of a string (width and height)
	void getTextSize (int & w, int & h, const char * c, const uint32_t maxLen = -1) {
		processString(0, 0, c, maxLen, false, &w, &h);
		}
		
	void getTextSize (int & w, int & h, const std::string & str) {
		processString(0, 0, str.data(), str.size(), false, &w, &h);
		}
	
	/// Returns the number of rows (newlines + 1) a string has here
	int getNumberOfRows (const std::string & str) {
		int n = 1;
		for (const char c : str)
			if (c == '\n') n++;
		return n;
		}

	/// Returns the height of string. This is much faster than getTextSize(), but only returns the height
	int getTextHeight (const std::string & str) {
		return scale*rowSize*getNumberOfRows(str);
		}
		
	void processString (const int x, const int y, const char* c, const uint32_t maxLen, const bool isDrawing, int * const widthOut = NULL, int * const heightOut = NULL) {
		// Scan through function and extract the glyphs
		uint32_t seek = 0;
		uint32_t uCharLast = 0;
		uint32_t uChar = utf8_read(c, seek, maxLen);
		int xx = x;
		int yy = y;
		if (widthOut) *widthOut = 0;
		if (heightOut) *heightOut = 0;
		while (uChar && seek <= maxLen) {
			if (uChar == '\n') {
				if (widthOut)
					if (*widthOut < xx) *widthOut = xx;
				xx = x;
				yy += scale*rowSize;
				}
			else {
				xx += scale*getKerningAdvance(uCharLast, uChar);
				processCodepoint(xx, yy, uChar, isDrawing);
				}
			uCharLast = uChar;
			uChar = utf8_read(c + seek, seek, maxLen);
			}
		if (widthOut) {
			if (*widthOut < xx) *widthOut = xx;
			*widthOut -= x;
			}
		if (heightOut) {
			if (*heightOut < yy) *heightOut = yy;
			*heightOut += scale*rowSize;
			*heightOut -= y;
			}
		}
	
	bool isTofu (sdl_stb_glyph * G) {
		if (!G) return true;
		if (!G->advance) return true; //unprintable characters have no width
		return false;
		}
	
	/// Returns either a glyph with a valid texture, or a tofu glyph with a valid texture or NULL
	sdl_stb_glyph * getGlyphOrTofu (const uint32_t codepoint) {
		sdl_stb_glyph * G = getGenGlyph(codepoint);
		if (!isTofu(G)) return G;
		
		G = getGenGlyph((uint32_t) 0xFFFD); // https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character
		if (!isTofu(G)) return G;
			
		 G = getGenGlyph((uint32_t) '?');
		if (!isTofu(G)) return G;
		return NULL;
		}
	
	void processCodepoint (int & x, int & y, const uint32_t codepoint, bool isDrawing) {
		// Draws the character, advances x & y to the next position
		// NOTE: KErning
		sdl_stb_glyph * G = getGlyphOrTofu(codepoint);
		if (!G) {
			x += faceSize/2;
			return;
			}
		if (isDrawing) {
			SDL_Rect r;
			r.x = x + G->xOffset;
			r.y = y + G->yOffset + baseline;
			r.w = G->width;
			r.h = G->height;
			if (G->mSdlTexture)
				SDL_RenderCopy(mRenderer, G->mSdlTexture, NULL, &r);
			}
		x += scale*G->advance;
		}
		
	/// Creates a SDL_Texture of a suitable size and renders an entire string to it
	SDL_Texture * renderTextToTexture (const char * c, const uint32_t maxLen = -1, int * widthOut = NULL, int * heightOut = NULL) {
		int width, height;
		getTextSize(width, height, c, maxLen);
		
		SDL_Texture * RT = SDL_CreateTexture(mRenderer, SDL_PIXELFORMAT_RGBA8888,SDL_TEXTUREACCESS_TARGET, width, height);
		SDL_SetRenderTarget(mRenderer, RT);
		SDL_SetRenderDrawColor(mRenderer, 255, 255, 255, 0); // Must be the same colour as the text
		SDL_SetTextureBlendMode(RT, SDL_BLENDMODE_BLEND);
		SDL_RenderClear(mRenderer);
		drawText(0, 0, c, maxLen);
		SDL_SetRenderTarget(mRenderer, NULL);
		
		*widthOut = width;
		*heightOut = height;
		return RT;
		}
	
	SDL_Texture * renderTextToTexture (const std::string & str, int * widthOut = NULL, int * heightOut = NULL) {
		return renderTextToTexture(str.data(), str.length(), widthOut, heightOut);
		}
	
	/// Same as renderTextToTexture, but stores the result in an object that has a convienent 
	void renderTextToObject (sdl_stb_prerendered_text * textOut, const char * c, const uint32_t maxLen = -1) {
		textOut->mSdlTexture = renderTextToTexture(c, maxLen, &(textOut->width), &(textOut->height));
		}
	void renderTextToObject (sdl_stb_prerendered_text * textOut, const std::string & str) {
		textOut->mSdlTexture = renderTextToTexture(str, &(textOut->width), &(textOut->height));
		}
	
	
	}

