// control-f -> "// Make your own implmentation for your own frontend here" for notes w.r.t making your own rendering frontend
#define STTFONT_STTR_CLASS_SIG(X)															\
	virtual void * sttr_getClassSig() const { return (void*) sttr::getTypeSignature<X>(); } \
	virtual const char * const sttr_getClassName() const { return sttr::getTypeName<X>(); }
	
#define STTFONT_STTR_CLASS_SIG_NON_POLY(X)													\
	void * sttr_getClassSig() const { return (void*) sttr::getTypeSignature<X>(); } \
	const char * const sttr_getClassName() const { return sttr::getTypeName<X>(); }


#hdr

#ifndef STTR_ENABLED
namespace sttr {
	template<typename T> inline const char * getTypeName() { return "sttr_not_defined"; }
	template<typename T> inline char * getTypeSignature() { return (char*) 0; }
	}
#endif

#ifndef STB_TRUETYPE_INCLUDE_HANDLED
	////////////////////////////////////////
	// STB TRUETYPE 
	// Handle double-including
	#ifdef STB_TRUETYPE_IMPLEMENTATION
		#undef STB_TRUETYPE_IMPLEMENTATION
	#endif
	#include "stb_truetype.h"
	////////////////////////////////////////
#endif

// Defines
#ifndef SSF_MAP
	#include <map>
	#define SSF_MAP std::map
#endif
#ifndef SSF_VECTOR
	#include <vector>
	#define SSF_VECTOR std::vector
#endif
#ifndef SSF_STRING
	#include <string>
	#define SSF_STRING std::string
#endif
#ifndef SSF_STRING_VIEW
	#include <string_view>
	#define SSF_STRING_VIEW std::string_view
#endif
#ifndef SSF_ATOMIC_INT
	#include <atomic>
	#define SSF_ATOMIC_INT std::atomic<int>
#endif

// new and delete macros
// all calls in this library are done with "foo * f = SSF_NEW(f)"
// implement your custom allocator by defining SSF_NEW and SSF_DEL
#ifndef SSF_NEW
	#define SSF_NEW(X) new X
#endif
#ifndef SSF_NEW_ARR
	#define SSF_NEW_ARR(X,S) new X[S]
#endif
#ifndef SSF_DEL
	#define SSF_DEL(X) delete X
#endif
#ifndef SSF_DEL_ARR
	#define SSF_DEL_ARR(X) delete[] X
#endif

struct sttfont_uintQuad {
	uint32_t first, second, third, fourth;
	
	inline sttfont_uintQuad() : first(0), second(0), third(0), fourth(0) {}
	inline sttfont_uintQuad(uint32_t a, uint32_t b = 0, uint32_t c = 0, uint32_t d = 0) : first(a), second(b), third(c), fourth(d) {}
	};

// workaround for temp arrays not being a thing on msvc
// used for stack allocated temporary arrays in function or block scope
template <typename T, int S>
struct sttfont_tmpArr {
	T stackBuff[S];
	T* heapBuff;
	T* arr;
	
	inline void reserve(const uint64_t sz) {
		if (heapBuff) abort();
		if (sz > S) {
			heapBuff = SSF_NEW_ARR(T, sz);
			arr = heapBuff;
			}
		}
	inline sttfont_tmpArr() : heapBuff(NULL), arr(&stackBuff[0]) {}
	inline sttfont_tmpArr(const uint64_t sz) : heapBuff(NULL), arr(&stackBuff[0]) { reserve(sz); }
	inline ~sttfont_tmpArr() { if (heapBuff) SSF_DEL_ARR(heapBuff); }
	};

#include <cstdint>

// move semantics - makes lzz happy
#define SSF_STRING_MS SSF_STRING&&
#define sttfont_formatted_text_item_MS sttfont_formatted_text_item&&
#define sttfont_formatted_text_MS sttfont_formatted_text&&

// misc
#ifdef INT32_MIN
	#define SSF_INT_MIN  INT32_MIN
#else
	#define SSF_INT_MIN 0x8000000;
#endif
struct sttfont_formatted_text;
class sttfont_font_cache;
#end

#src
#include <stdio.h>

#ifndef STB_TRUETYPE_INCLUDE_HANDLED
	////////////////////////////////////////
	// STB TRUETYPE 
	#define STB_TRUETYPE_IMPLEMENTATION
	#include <math.h>
	#include <string.h>
	#include <assert.h>
	#include <stdlib.h>
	#include "stb_truetype.h"
	////////////////////////////////////////
#endif

#end

#insert "sttFontFormattedText.lzz"

struct sttfont_uint32_t_range {
	uint32_t start, end;
	
	static void populateRangesLatin (SSF_VECTOR<sttfont_uint32_t_range> & mRanges) {
		sttfont_uint32_t_range r;
		r.start = 0x20;
		r.end  = 0x7f;
		mRanges.push_back(r);
		} 
	static void populateRangesCyrillic (SSF_VECTOR<sttfont_uint32_t_range> & mRanges) {
		sttfont_uint32_t_range r;
		r.start = 0x0400; r.end  = 0x052F; // Cyrillic + Cyrillic Supplement
		mRanges.push_back(r);
		r.start = 0x2DE0; r.end  = 0x2DFF; // Cyrillic Extended-A
		mRanges.push_back(r);
		r.start = 0xA640; r.end  = 0xA69F; // Cyrillic Extended-B
		mRanges.push_back(r);
		}
	};

struct sttfont_prerendered_text {
	int width, height;
	sttfont_prerendered_text () : width(0), height(0) {}
	
	virtual ~sttfont_prerendered_text() {}
	virtual void freeTexture() {
		// Make your own implmentation for your own frontend here
		// Used to clear any resources held here
		}
	
	/// Draws this prerendered text object, returns the x coordinate
	/// at the end of the drawing
	virtual int draw (const int x, const int y) { return x + width; }
	virtual int drawWithColorMod(const int x, const int y, const uint8_t r, const uint8_t g, const uint8_t b, const uint8_t a = 255) {
		return x + width;
		}
		
	virtual int draw(sttfont_font_cache* fc, const int x, const int y) { return draw(x, y); }
	virtual int drawWithColorMod(sttfont_font_cache* fc, const int x, const int y, const uint8_t r, const uint8_t g, const uint8_t b, const uint8_t a) { return drawWithColorMod(x,y,r,g,b,a); }
		
	};

struct sttfont_glyph {
	int advance;
	int leftSideBearing;
	int16_t width, height;
	int16_t xOffset, yOffset;
	
	sttfont_glyph () : advance(0), leftSideBearing(0), width(0), height(0), xOffset(0), yOffset(0) {}
	};

/// Memory management
struct sttfont_memory {
	char * data;
	size_t size;
	bool ownsData;
	
	void alloc(const size_t _size) {
		data = SSF_NEW_ARR(char, _size);
		size = _size;
		ownsData = true;
		}
		
	void transferTo(sttfont_memory & destination) {
		destination.data = data;
		destination.size = size;
		destination.ownsData = ownsData;
		ownsData = false;
		}
		
	void cloneTo(sttfont_memory& other) {
		other.alloc(size);
		memcpy(other.data, data, size);
		other.ownsData = true;
		}
	
	sttfont_memory () : data(NULL), size(0), ownsData(false) {}
	~sttfont_memory () {
		if (ownsData) {
			SSF_DEL_ARR(data);
			data = NULL;
			}
		}
	};
	
/// Linked list of fonts. This is for font fallback purposes
struct sttfont_font_list {
	stbtt_fontinfo mFont;
	sttfont_memory mMemory;
	uint8_t format;			// Value is one of sttfont_format::FORMAT_*
	SSF_VECTOR<sttfont_font_list*> mFormatedVariants;	// Variants for bold, italic, etc
	sttfont_font_list * next;
		
	sttfont_font_list() : format(0), next(NULL) {}
	~sttfont_font_list() {
		for (sttfont_font_list * fl : mFormatedVariants)
			delete fl;
		if (next) delete next;
		}
	
	/// Finds the font with the code point for 
	void fetchFontForCodepoint(const uint32_t codepoint, const uint8_t format, stbtt_fontinfo ** mFontOut, int * indexOut) {
		sttfont_font_list * working = this;
		
		*mFontOut = NULL;
		*indexOut = 0;
		
		while (working) {
			int index = stbtt_FindGlyphIndex(&(working->mFont), codepoint);
			if (index) {
				// Check for format in the variants
				if (format) {
					int bestBitsCount = 0;
					sttfont_font_list * bestMatch = NULL;
					sttfont_font_list * bestMatch2 = NULL;
					for (sttfont_font_list * f : mFormatedVariants) {
						uint8_t mask = (format & f->format);
						if (mask) {
							int nBits = 0;
							for (int i = 0; i < 7; ++i)
								if (mask & (1 << i)) nBits++;
							if (nBits > bestBitsCount) {
								bestBitsCount = nBits;
								bestMatch2 = bestMatch;
								bestMatch = f;
								}
							}
						}
					
					if (bestMatch) {
						int index2 = stbtt_FindGlyphIndex(&(bestMatch->mFont), codepoint);
						*mFontOut = &(bestMatch->mFont);
						*indexOut = index2;
						return;
						}
					if (bestMatch2) {
						int index2 = stbtt_FindGlyphIndex(&(bestMatch2->mFont), codepoint);
						*mFontOut = &(bestMatch2->mFont);
						*indexOut = index2;
						return;
						}
					}
				
				// Format not found/no format
				*mFontOut = &(working->mFont);
				*indexOut = index;
				return;
				}
			working = working->next;
			}
		}
	};
	
/// Cache of a font
class sttfont_font_cache {
public:
	sttfont_font_list mFont;
	// Read-only (for you!) parameters set by library. You can change these
	// if you know what you're doing
	int ascent;
	int descent;
	int lineGap;
	int baseline;
	int rowSize;
	int tabWidth;	// May be changed later
	float scale;
	float underlineThickness;
	float strikethroughThickness;
	float underlinePosition;
	float strikethroughPosition;
	// Must be set before loadFont() is called. Cannot be changed after
	int faceSize;			// Default is 20. All the parameters are calcualted based on this
	int tabWidthInSpaces;	// Default is 8, set this before loadFont(). Max 128. Sets tabWidth when font is loaded
	void* userData;			// Pointer for whatever purpose you see fit
	
	sttfont_font_cache () : ascent(0), descent(0), lineGap(0), baseline(0), rowSize(0), tabWidth(1), scale(1.f),
		underlineThickness(1.0), strikethroughThickness(1.0), underlinePosition(0.0), strikethroughPosition(0.0),
		faceSize(20), tabWidthInSpaces(8), userData(NULL) {}
	virtual ~sttfont_font_cache () {}
	
		
	/// Sets the face size. Must be called BEFORE loading a font!
	void setFaceSize(const int _faceSize) { faceSize = _faceSize; }
	
	/// The size between rows, in the same coordinates as whatever you set faceSize as
	int getScaledRowSize () const { return scale * rowSize; }
	
	/// Used by producer_consumer_font_cache to sync internal states
	void syncFrom(const sttfont_font_cache & other) {
		tabWidth = other.tabWidth;
		faceSize = other.faceSize;
		tabWidthInSpaces = other.tabWidthInSpaces;
		}
	
	/// Loads the primary font
	/// Also computes font properties (ascent/decent/basline/scale/rowSize/etc)
	/// ttf_buffer must be null terminated
	void loadFont (const char * ttf_buffer, int index = 0) {
		stbtt_InitFont(&mFont.mFont, (const unsigned char *) ttf_buffer, stbtt_GetFontOffsetForIndex((const unsigned char *) ttf_buffer,index));
		stbtt_GetFontVMetrics(&mFont.mFont, &ascent, &descent, &lineGap);
		
		scale = stbtt_ScaleForPixelHeight(&mFont.mFont, faceSize);
		baseline = ascent*scale;
		rowSize = ascent - descent + lineGap;
		
		strikethroughThickness = faceSize/20.0;
		if (strikethroughThickness < 1) strikethroughThickness = 1;
		strikethroughPosition = baseline * 0.75 - strikethroughThickness/2;
		underlineThickness = strikethroughThickness;
		underlinePosition = baseline + underlineThickness;
		
		int w,h;
		getTextSize(w,h,"                                                                                                                                ", tabWidthInSpaces <= 128 ? tabWidthInSpaces : 128);
		tabWidth = w;
		if (tabWidth < 1) tabWidth = 1;
		}
	
	/// Does the dame as loadFont, but transfers ownership of the memory to here
	/// ttf_buffer must be null terminated
	/// ttf_buffer will be deallocated when this class is destroyed
	/// Example usage:
	/// filep * file = openFile("path/to/file");
	/// sttfont_memory mem;
	/// mem.alloc(file_size);
	/// fread(file, &mem.data);
	/// mSdl_stb_font_cache.loadFontManaged (mem);
	/// You can safely let mem drop out of scope
	void loadFontManaged (sttfont_memory & memory, int index = 0) {
		memory.transferTo(mFont.mMemory);
		loadFont(mFont.mMemory.data, index);
		}
		
	/// Loads a fallback font. If a glyph is not found in a primary font it'll fallback to one of these
	/// ttf_buffer must be null terminated
	void addFont (const char * ttf_buffer, int index = 0) {
		addFontWrap afw(ttf_buffer);
		afw.index = index;
		addFont_worker(afw, false);
		}
		
	/// Same as addFont, but transfers ownership of the memory to here
	/// ttf_buffer will be deallocated when this class is destroyed
	/// ttf_buffer must be null terminated
	/// Example usage:
	/// filep * file = openFile("path/to/file");
	/// sttfont_memory mem;
	/// mem.alloc(file_size);
	/// fread(file, &mem.data);
	/// mSdl_stb_font_cache.loadFontManaged (mem);
	/// You can safely let mem drop out of scope
	void addFontManaged (sttfont_memory & memory, int index = 0) {
		addFontWrap afw(NULL);
		afw.memory = &memory;
		afw.index = index;
		addFont_worker(afw, false);
		}
	
	/// Adds a format variant to the last loaded font
	/// Use this to add Bold, Italic, etc
	/// FormatMask is one of sttfont_format::FORMAT_*
	void addFormatFont (uint8_t formatMask, const char * ttf_buffer, int index = 0) {
		addFontWrap afw(ttf_buffer);
		afw.index = index;
		addFont_worker(afw, true, formatMask);
		}
	
	void addFormatFontManaged (uint8_t formatMask, sttfont_memory & memory, int index = 0) {
		addFontWrap afw(NULL);
		afw.memory = &memory;
		afw.index = index;
		addFont_worker(afw, true, formatMask);
		}
		
		
protected:
	struct addFontWrap {
		const char * ttf_buffer;
		sttfont_memory * memory;
		int index;
		addFontWrap (const char * c) : ttf_buffer(c), memory(NULL), index(0) {}
		};
		
	void addFont_worker(addFontWrap & fwm, bool isFormatVariant, uint8_t formatMask = 0) { 
		sttfont_font_list * n = SSF_NEW(sttfont_font_list);
		sttfont_font_list * w = &mFont;
		while (w->next)
			w = w->next;
		n->format = formatMask;
		
		if (fwm.memory) {
			sttfont_memory & memory = *(fwm.memory);
			memory.transferTo(n->mMemory);
			stbtt_InitFont(&n->mFont, (const unsigned char *) n->mMemory.data, stbtt_GetFontOffsetForIndex((const unsigned char *) n->mMemory.data,fwm.index));
			}
		else {
			stbtt_InitFont(&n->mFont, (const unsigned char *) fwm.ttf_buffer, stbtt_GetFontOffsetForIndex((const unsigned char *) fwm.ttf_buffer,fwm.index));
			}
		if (isFormatVariant)
			w->mFormatedVariants.push_back(n);
		else
			w->next = n;
		}
public:

	/// For a given codepoint, generate a texture (if required) and populate the
	/// details of the glyph (width, height, etc) in gOut	
	/// if bitmapOut is set then the bitmap data will by copied there and the glyph not stored, you must store it yourself
	void genGlyph (const uint32_t codepoint, const uint8_t format, sttfont_glyph * gOut, unsigned char ** bitmapOut = NULL) {
		// Fetch font and index - existance check for glyph in font
		// format is a number representing regular, bold, itallic, bold itallic
		stbtt_fontinfo * mFontContaining;
		int mIndex;
		mFont.fetchFontForCodepoint(codepoint, format, &mFontContaining, &mIndex);
		
		if (!mIndex)
			return;
		
		// found the font! generate the glyph
	   	unsigned char *bitmap;
	   	int w,h,woff,hoff;
		bitmap = stbtt_GetCodepointBitmap(mFontContaining, 0, scale, codepoint, &w, &h, &woff, &hoff);
		
        // Convert bitmap to RGBA8888
		// Todo - change RBGA8888 to R8
		unsigned int sz = w*h;
		if (sz) {
			if (bitmapOut) {
				//memcpy, the frontend will bulk store glyphs
				(*bitmapOut) = SSF_NEW_ARR(unsigned char,sz*4);
				unsigned char* bitmap2 = *bitmapOut;

				for (unsigned int i = 0; i < sz; ++i) {
					bitmap2[i*4+0] = 255;
					bitmap2[i*4+1] = 255;
					bitmap2[i*4+2] = 255;
					bitmap2[i*4+3] = bitmap[i];
					}
				}
			else {
				// wirte single character directly
				unsigned char bitmap2[sz*4];
				for (unsigned int i = 0; i < sz; ++i) {
					bitmap2[i*4+0] = 255;
					bitmap2[i*4+1] = 255;
					bitmap2[i*4+2] = 255;
					bitmap2[i*4+3] = bitmap[i];
					}
				genGlyph_writeData(codepoint, gOut, bitmap2, w, h);
				}
			}
        
			
        stbtt_FreeBitmap (bitmap, 0);
		
		gOut->width = w;
		gOut->height = h;
		int advance, leftSideBearing;
		stbtt_GetCodepointHMetrics(mFontContaining, codepoint, &advance, &leftSideBearing);
		gOut->advance = advance;
		gOut->leftSideBearing = leftSideBearing;
		
		gOut->xOffset = woff;
		gOut->yOffset = hoff;
		}
	
	/// Pregenerate glyphs. For SDL software rendering this isn't needed
	/// For GPU based rendering that uses a atlas (OpenGl, Bgfx, etc) this is recommended
	virtual void pregenGlyphs(SSF_VECTOR<sttfont_uint32_t_range> & mRanges, const uint8_t format) {
		// Make your own implmentation for your own frontend here
		for (const sttfont_uint32_t_range & r : mRanges) {
			for (uint32_t codepoint = r.start; codepoint <= r.end; ++codepoint) {
				uint64_t target = codepoint | (uint64_t(format) << 32);
				genGlyph_createAndInsert(target, codepoint, format);
				}
			}
		}
	
	virtual void genGlyph_writeData (const uint32_t codepoint, sttfont_glyph * gOut, unsigned char * bitmap2, int w, int h) {
		// Make your own implmentation for your own frontend here
		}
	
	virtual sttfont_glyph * getGlyph(const uint64_t target) {
		// Make your own implmentation for your own frontend here
		return NULL;
		}
	
	/// Looks up a glyph, generating it if it does not exist yet
	sttfont_glyph * getGenGlyph(const uint32_t codepoint, const uint8_t format) {
		uint64_t target = codepoint | (uint64_t(format) << 32);
		sttfont_glyph * r = getGlyph(target);
		if (r) return r;
		return genGlyph_createAndInsert(target, codepoint, format);
		}
		
	virtual sttfont_glyph * genGlyph_createAndInsert(const uint64_t target, const uint32_t codepoint, const uint8_t format) {
		// Make your own implmentation for your own frontend here
		return getGlyph(target);
		}
		
	int getKerningAdvance(const uint32_t cp1, const uint32_t cp2) {
		return stbtt_GetCodepointKernAdvance(&mFont.mFont, cp1, cp2);
		}
	
	static int utf8_charsize(const char* c) {
		if (!c) return 0;
		if ((uint8_t)*c <= 0x7F) return 1;
		else if ((uint8_t)*c <= 0xE0) return 2;
		else if ((uint8_t)*c <= 0xF0) return 3;
		else
			return 4;
		}
		
	static int utf8_charsize(const uint32_t codepoint) {
		if ((codepoint & 0x000000ff) == codepoint) return 1;
		if ((codepoint & 0x0000ffff) == codepoint) return 2;
		if ((codepoint & 0x00ffffff) == codepoint) return 3;
		return 4;
		}
	
	/// Reads a utf8 codepoint from a string
	static uint32_t utf8_read(const char* c, uint32_t & seek, const uint32_t maxLen) {
		if (!c) return 0;
		int chsz = utf8_charsize(c);
		seek += chsz;
	
		if (seek > maxLen) {
			return *c; //Buffer overflow - stop to be safe!
			}
			
		if (chsz == 1) return *c;		
		if (chsz == 2)
			return (((uint32_t((uint8_t) c[0] & 0b00111111) << 6)) | uint32_t((uint8_t) c[1] & 0b00111111));
		if (chsz == 3)
			return (uint32_t((uint8_t) c[0] & 0b00011111) << 12) | (uint32_t((uint8_t) c[1] & 0b00111111) << 6) | uint32_t((uint8_t) c[2] & 0b00111111);
		return (uint32_t((uint8_t) c[0] & 0b00001111) << 18) | (uint32_t((uint8_t) c[1] & 0b00111111) << 12) | (uint32_t((uint8_t) c[2] & 0b00111111) << 6) | uint32_t((uint8_t) c[3] & 0b00111111);
		}
	
	
	/// Draws a c string at position x, y
	/// maxLen should be set if you want to use non-zero terminated strings
	/// Returns the x coordinate of the caret at the end of the string
	/// (If you draw a 100 width string at x=5 this will return 105.
	/// If there is a newline at the end this will return 5) 
	int drawText(const int x, const int y, const char * c, const uint32_t maxLen = -1) {
		return processString(x, y, c, maxLen, NULL, true);
		}
	
	int drawText (const int x, const int y, const SSF_STRING & str) {
		return drawText(x,y,str.data(),str.size());
		}
	
	/// With formatting for the entire string
	int drawText(const int x, const int y, const sttfont_format format, const char * c, const uint32_t maxLen = -1) {
		return processString(x, y, c, maxLen, &format, true);
		}
	
	int drawText (const int x, const int y, const sttfont_format format, const SSF_STRING & str) {
		return drawText(x,y,format, str.data(),str.size());
		}

	/// These overloads return the width and height of the drawn string
	int drawText(const int x, const int y, int & widthOut, int & heightOut, const char * c, const uint32_t maxLen = -1) {
		return processString(x, y, c, maxLen, NULL, true, &widthOut, &heightOut);
		}
	
	int drawText (const int x, const int y, const sttfont_format format, const SSF_STRING & str, int & widthOut, int & heightOut) {
		return drawText(x,y,widthOut, heightOut, format, str.data(),str.size());
		}
		
	int drawText(const int x, const int y, int & widthOut, int & heightOut, const sttfont_format format, const char * c, const uint32_t maxLen = -1) {
		return processString(x, y, c, maxLen, &format, true, &widthOut, &heightOut);
		}
	
	int drawText (const int x, const int y, const SSF_STRING & str, int & widthOut, int & heightOut) {
		return drawText(x,y,widthOut, heightOut, str.data(),str.size());
		}
		
	int drawText(const int x, const int y, const sttfont_formatted_text & text) {
		int dummyWidth, dummyHeight;
		return drawText(x, y, text, dummyWidth, dummyHeight);
		}
		
	int drawText(const int x, const int y, const sttfont_formatted_text & text, int & widthOut, int & heightOut) {
		return processFormatted(text, x, y, true, &widthOut, &heightOut);
		}
	
	/// Gets the size of a string (width and height). Returns the x position of the caret at the end of the string
	int getTextSize (int & w, int & h, const char * c, const uint32_t maxLen = -1, sttfont_lookupHint * mHint = NULL, const int * const maxWidth = NULL) {
		return processString(0, 0, c, maxLen, NULL, false, &w, &h, maxWidth);
		}
		
	int getTextSize (int & w, int & h, const SSF_STRING & str, sttfont_lookupHint * mHint = NULL, const int * const maxWidth = NULL) {
		return processString(0, 0, str.data(), str.size(), NULL, false, &w, &h, maxWidth, mHint);
		}
	int getTextSize (int & w, int & h, const sttfont_formatted_text & str, sttfont_lookupHint * mHint = NULL, const int * const maxWidth = NULL) {
		return processFormatted(str, 0, 0, false, &w, &h, maxWidth, mHint);
		}
	
	/// Counts the number of newlines ('\n') a string has. Utf8-safe
	int countNewlines(const SSF_STRING & str) {
		int n = 0;
		
		uint32_t seek = 0;
		const uint32_t len = str.length();
		while (seek < len) {
			uint32_t uChar = sttfont_font_cache::utf8_read(&str[seek], seek, len);
			if (uChar == uint32_t('\n')) n++;
			}
		return n;
		}
	
	/// Returns the number of rows (newlines + 1) a string has here
	int getNumberOfRows (const SSF_STRING & str) {
		int n = 1 + countNewlines(str);
		return n;
		}
		
	int getNumberOfRows (const sttfont_formatted_text & str) {
		int n = 1;
		for (const sttfont_formatted_text_item & item : str.mItems) {
			n += countNewlines(item.text);
			}
		return n;
		}

	/// Returns the height of string. This is much faster than getTextSize(), but only returns the height
	int getTextHeight (const SSF_STRING & str) {
		return scale*rowSize*getNumberOfRows(str);
		}
	int getTextHeight (const sttfont_formatted_text & str) {
		return scale*rowSize*getNumberOfRows(str);
		}
	
	/// Returns the rendered width of a string. This is just a wrapper for getTextSize() that discards the height
	int getTextWidth(const SSF_STRING & str, sttfont_lookupHint * mHint = NULL, const int * const maxWidth = NULL) {
		int w,h;
		getTextSize(w, h, str, mHint, maxWidth);
		return w;
		}
		
	int getTextWidth(const sttfont_formatted_text & str, sttfont_lookupHint * mHint = NULL, const int * const maxWidth = NULL) {
		int w,h;
		getTextSize(w, h, str, mHint, maxWidth);
		return w;
		}
	
	virtual void onStartDrawing() {}
	virtual void onCompletedDrawing() {}
	virtual void startManuallyBuffering(const bool beginBuffering) {}
	virtual void endManuallyBuffering(const bool flush) {}
	
	int processString (const int x, const int y, const char* c, const uint32_t maxLen, const sttfont_format * const format, const bool isDrawing, int * const widthOut = NULL, int * const heightOut = NULL, const int * const maxWidth = NULL, sttfont_lookupHint * mHint = NULL, const int * const threshX = NULL, const int * const threshY = NULL, int * const caretPosition = NULL, int initialXOffset = 0) {
		onStartDrawing();
		int r = processString_worker(x, y, c, maxLen, format, isDrawing, widthOut, heightOut, maxWidth, mHint, threshX, threshY, caretPosition, initialXOffset);
		onCompletedDrawing();
		return r;
		}
	
	int processString_worker (const int x, const int y, const char* c, const uint32_t maxLen, const sttfont_format * const format, const bool isDrawing, int * const widthOut, int * const heightOut, const int * const maxWidth, sttfont_lookupHint * mHint, const int * const threshX, const int * const threshY, int * const caretPosition, int initialXOffset) {
		// Scan through function and extract the glyphs
		// returns the x position at the end
		uint32_t seek = 0;
		uint32_t seekLast = 0;
		uint32_t uCharLast = 0;
		
		int xx = x + initialXOffset;
		int overdraw = SSF_INT_MIN;
		int yy = y;
		
		if (mHint) {
			seek = mHint->workingLen;
			seekLast = seek;
			xx = mHint->workingX;
			yy = mHint->workingY;
			uCharLast = mHint->uCharLast;
			}
			
		uint32_t uChar = utf8_read(c+seek, seek, maxLen);
		if (widthOut) { *widthOut = 0; if (mHint) *widthOut = mHint->workingX-x; }
		if (heightOut) { *heightOut = 0; if (mHint) *heightOut = mHint->workingY-y; }
		
		const bool lookupCaret = caretPosition && threshX && threshY;
		if (lookupCaret) {
			*caretPosition = -1;
			}
		
		int xxl = xx;
		while (uChar && seek <= maxLen) {
			//if (mHint)
			//	std::cout << "Processing: (" << seekLast << "," << (seek-seekLast) << ") " << std::string(&c[seekLast], seek-seekLast) << ", codePoint " << uChar << ", suibstring: [" << std::string(&c[seekLast]) << "], fullstring:["<<maxLen<<"] " << c << std::endl;
			xxl = xx;
			if (uChar == '\t') {
				// Next tab position:
				int nTabsSoFar = (xx - x)/tabWidth;
				xx = x + (nTabsSoFar+1)*tabWidth;
				}
			else if (uChar == '\n') {
				if (widthOut)
					if (*widthOut < xx) *widthOut = xx;
				xx = x;
				yy += scale*rowSize;
				overdraw = SSF_INT_MIN;
				}
			else {
				int dx = scale*getKerningAdvance(uCharLast, uChar);
				xx += dx;
				processCodepoint(xx, yy, uChar, format, isDrawing, dx, overdraw);
				}
			
			if (lookupCaret) {
				//const int dx = xx - x;
				if (xx > *threshX && xxl <= *threshX ) {
					if (*threshX > xxl + (xx - xxl)/2)
						*caretPosition = seek; // right half of char
					else
						*caretPosition = seekLast; // left half of char
						
					if (mHint) {
						if (mHint->writeOut) {
							mHint->workingLen = seek;
							mHint->workingX = xx;
							mHint->workingY = yy;
							mHint->uCharLast = uCharLast;
							}
						}
					return xx;
					}
				}
				
			if (mHint) {
				if (mHint->writeOut) {
					mHint->uCharLast = uCharLast;
					mHint->workingLen = seek;
					mHint->workingX = xx;
					mHint->workingY = yy;
					}
				}
			uCharLast = uChar;
			seekLast = seek;
			uChar = utf8_read(c + seek, seek, maxLen);
			if (maxWidth) {
				if (xx > *maxWidth) break;
				}
			}
		if (widthOut) {
			if (*widthOut < xx) *widthOut = xx;
			*widthOut -= x;
			}
		if (heightOut) {
			if (*heightOut < yy) *heightOut = yy;
			*heightOut += scale*rowSize;
			*heightOut -= y;
			}
		return xx;
		}

	int processFormatted(const sttfont_formatted_text & text, int x, int y, const bool isDrawing, int * const widthOut = NULL, int * const heightOut = NULL, const int * const maxHeight = NULL, sttfont_lookupHint * mHint = NULL, const int * const threshX = NULL, const int * const threshY = NULL, int * const caretPosition = NULL, int initialXOffset = 0) {
		onStartDrawing();
		int ret = processFormatted_worker(text, x, y, isDrawing, widthOut, heightOut, maxHeight, mHint, threshX, threshY, caretPosition, initialXOffset);
		onCompletedDrawing();
		return ret;
		}
		
	int processFormatted_worker(const sttfont_formatted_text & text, int x, int y, const bool isDrawing, int * const widthOut = NULL, int * const heightOut = NULL, const int * const maxHeight = NULL, sttfont_lookupHint * mHint = NULL, const int * const threshX = NULL, const int * const threshY = NULL, int * const caretPosition = NULL, int initialXOffset = 0) {
		int xOffset = initialXOffset;
		int yOffset = 0;
		
		if (widthOut) *widthOut = 0;
		if (heightOut) *heightOut = 0;
		
		size_t runningLength = 0;
		
		unsigned int start = 0;
		if (mHint) start = mHint->index;
		
		for (unsigned int i = start; i < text.mItems.size(); ++i) {
			const sttfont_formatted_text_item & ssfti = text.mItems[i];
			
			bool isDrawingWorking = isDrawing;
			if (ssfti.callback && isDrawingWorking)
				isDrawingWorking = (ssfti.format.format & sttfont_format::FORMAT_RENDER_EVEN_IF_CALLBACK_EXISTS);
			
			int widthWorking, heightWorking;
			
			int xOffsetBefore = xOffset;
			int carretPosition2 = -1;
			
			if (mHint) {
				if (mHint->writeOut) {
					mHint->index = i;
					}
				if (i != start) {
					mHint->workingLen = 0;
					mHint->workingX = 0;
					mHint->workingY = 0;
					}
				}
				
			xOffset = processString_worker(x,y + yOffset, ssfti.text.data(), ssfti.text.size(), &ssfti.format, isDrawingWorking, &widthWorking, &heightWorking, maxHeight, mHint, threshX, threshY, caretPosition ? &carretPosition2 : NULL, xOffset); // color!!!
			
			if (caretPosition) {
				if (carretPosition2 >= 0)
					*caretPosition = runningLength + carretPosition2;
				runningLength += ssfti.text.size(); // running length is only calculated here as its only used here
				}
			
			xOffset -= x;
			yOffset += heightWorking - scale*rowSize;
			if (widthOut) *widthOut = *widthOut > widthWorking ? *widthOut : widthWorking;
			
			heightWorking = yOffset + scale*rowSize;
			if (heightOut) *heightOut = *heightOut > heightWorking ? *heightOut : heightWorking;
			
			if (ssfti.callback)
				ssfti.callback->callbackOnDraw(text, i, x, y, xOffsetBefore, xOffset, widthWorking, heightWorking);
			}
		
		int ret = xOffset + x; 
		return ret;
		}
	
	
	/// Returns the position in the string where a click happend
	/// MouseX and MouseY are relative to whatever draw position of this string you are using
	/// Currently only suppors single row strings
	int getCaretPos(const SSF_STRING & str, const int relMouseX, const int relMouseY, sttfont_lookupHint * mHint = NULL) {
		int caretPosition = -1;
		processString(0,0, str.data(), str.length(), NULL, false, NULL, NULL, NULL, mHint, &relMouseX, &relMouseY, &caretPosition);
		return caretPosition;
		}
	int getCaretPos(const sttfont_formatted_text & str, const int relMouseX, const int relMouseY, sttfont_lookupHint * mHint = NULL) {
		int caretPosition = -1;
		processFormatted(str, 0,0, false, NULL, NULL, NULL, mHint, &relMouseX, &relMouseY, &caretPosition);
		return caretPosition;
		}
	
	bool isTofu (sttfont_glyph * G) {
		if (!G) return true;
		if (!G->advance) return true; //unprintable characters have no width
		return false;
		}
	
	/// Returns either a glyph with a valid texture, or a tofu glyph with a valid texture or NULL
	sttfont_glyph * getGlyphOrTofu (const uint32_t codepoint, const uint8_t format) {
		const uint8_t format_wo_underline_or_strike = format & ~(sttfont_format::FORMAT_STRIKETHROUGH | sttfont_format::FORMAT_UNDERLINE);
		sttfont_glyph * G = getGenGlyph(codepoint, format_wo_underline_or_strike);
		if (!isTofu(G)) return G;
		
		G = getGenGlyph((uint32_t) 0xFFFD, format_wo_underline_or_strike); // https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character
		if (!isTofu(G)) return G;
			
		G = getGenGlyph((uint32_t) '?', format_wo_underline_or_strike);
		if (!isTofu(G)) return G;
		
		if (format_wo_underline_or_strike)
			return getGlyphOrTofu(codepoint, 0);
		
		return NULL;
		}
	
	// NOTE: 2022 - processCodepoint is no longer virtual - instead use drawCodepoint as your injection point for frontends
	void processCodepoint (int & x, int & y, const uint32_t codepoint, const sttfont_format * const format, bool isDrawing, int kerningAdv, int & overdraw) {
		// Draws the character, advances x & y to the next position
		uint8_t formatCode = 0;
		if (format)
			formatCode = format->format;
			
		sttfont_glyph * G = getGlyphOrTofu(codepoint, formatCode);
		if (!G) {
			x += faceSize/2;
			return;
			}
		if (isDrawing) {
			drawCodepoint(G, x, y, codepoint, format, formatCode, kerningAdv, overdraw); //<--- implement your custom version of this
			}
		x += scale*G->advance;
		}
		
	virtual void drawCodepoint (const sttfont_glyph * const GS, const int x, const int y, const uint32_t codepoint, const sttfont_format * const format, const uint8_t formatCode, const int kerningAdv, int & overdraw) {
		// Draws the character
		// @overdraw: This is used for fixing pixel bleed on some backends (such as SDL). If your backend doesn't bleed then you can ignore it
		// Make your own implmentation for your own frontend here
		}
		
	/// Creates a SDL_Texture of a suitable size and renders an entire string to it
	//SDL_Texture * renderTextToTexture (const char * c, const uint32_t maxLen = -1, int * widthOut = NULL, int * heightOut = NULL) {
	//	return renderTextToTexture_worker(NULL, c, maxLen, widthOut, heightOut);
	//	}
	//SDL_Texture * renderTextToTexture (const sttfont_formatted_text & formatted, int * widthOut = NULL, int * heightOut = NULL) {
	//	return renderTextToTexture_worker(&formatted, NULL, -1, widthOut, heightOut);
	//	}
	//SDL_Texture * renderTextToTexture (const SSF_STRING & str, int * widthOut = NULL, int * heightOut = NULL) {
	//	return renderTextToTexture(str.data(), str.length(), widthOut, heightOut);
	//	}
	//SDL_Texture * renderTextToTexture_worker (const sttfont_formatted_text * formatted, const char * c, const uint32_t maxLen = -1, int * widthOut = NULL, int * heightOut = NULL) {
	//	// Make your own implmentation for your own frontend here
	//	}

	/// Same as renderTextToTexture, but stores the result in an object that has a convienent 
	virtual void renderTextToObject (sttfont_prerendered_text * textOut, const char * c, const uint32_t maxLen = -1) {
		// Make your own implmentation for your own frontend here
		//textOut->mSdlTexture = renderTextToTexture(c, maxLen, &(textOut->width), &(textOut->height));
		}
	virtual void renderTextToObject (sttfont_prerendered_text * textOut, const SSF_STRING & str) {
		// Make your own implmentation for your own frontend here
		//textOut->mSdlTexture = renderTextToTexture(str, &(textOut->width), &(textOut->height));
		}
	virtual void renderTextToObject (sttfont_prerendered_text * textOut, const sttfont_formatted_text & str) {
		// Make your own implmentation for your own frontend here
		//textOut->mSdlTexture = renderTextToTexture(str, &(textOut->width), &(textOut->height));
		}
	
	/// Breaks a string into a vector of substrings such that each string is not longer xs
	/// Tries to break on whitespace, if it cannot then it will split based on characters
	/// UTF-8 safe
	void breakString (const sttfont_formatted_text & stringIn, SSF_VECTOR<sttfont_formatted_text> & arrOut, const int xs,
		const bool tokeniseNewLines = true, SSF_VECTOR<sttfont_uintQuad> * breakPoints = NULL) {
		// Note: This some of the ugliest code I have ever written. Look upon it and weap
		if (tokeniseNewLines) {
			SSF_VECTOR<sttfont_formatted_text> tokenised;
			stringIn.tokenise(tokenised, '\n', false, 0);
			
			for (sttfont_formatted_text & sft : tokenised) {
				breakString(sft, arrOut, xs, false, breakPoints);
				}
			return;
			}
		
		//std::cout << "Breaking: " << stringIn.getString() << ", xs: " << xs << std::endl;
		
		// Trivial cases
		if (getTextWidth(stringIn) < xs) {
			if (breakPoints) breakPoints->push_back(sttfont_uintQuad(arrOut.size(), 0, stringIn.size()));
			arrOut.push_back(stringIn.copy());
			return;
			}
			
		SSF_VECTOR<sttfont_formatted_text> tokenised;
		stringIn.tokenise(tokenised, ' ', false, 0, true);
		
		
		size_t lastInsert = 0;
		uint32_t workingLen = 0;	// Working length in pixels
		uint32_t iWorkingLen = 0;	// Working length in bytes
		uint32_t iWorkingLenLastBreak = 0;	// The length at the last break. Effectivley the start point of a split
		uint32_t spaceLen = 0;
		
		spaceLen = getTextWidth(sttfont_formatted_text(" "));
		
		#if 0
			{
			std::cout << "String [" << stringIn.getString() << "], Tokens: (" << tokenised.size() << ") ";
			for (size_t ti = 0; ti < tokenised.size(); ++ti) {
				if (ti) std::cout <<", ";
				std::cout << "[" << tokenised[ti].getString() << "]";
				}
			std::cout << std::endl;
			}
		#endif
		
		int maxLenLookup = xs + spaceLen; // If a string is longer than this, stop calcualting its length (early out)
		
		for (size_t ti = 0; ti < tokenised.size(); ++ti) {
			bool breakLongWord = false;
			int tokLen = 0;
			//uint64_t TSTART = 0;
			//topOfLoop:
			//TSTART = SDL_GetPerformanceCounter();
			const sttfont_formatted_text & thisTokenS = tokenised[ti];
			
			tokLen = getTextWidth(thisTokenS, NULL, &maxLenLookup);
			
			// Check last character is space. If it is, ignore the length of it
			if (thisTokenS.mItems.size()) {
				const SSF_STRING & str = thisTokenS.mItems[thisTokenS.mItems.size()-1].text;
				if (str.size()) {
					if (str[str.size()-1] == ' ')
						tokLen -= spaceLen;
					}
				}
			
			if (tokLen > xs) {
				// Break this token
				uint32_t subWorkingLen = 0;
				sttfont_lookupHint mHint;
					mHint.writeOut = true;
				sttfont_lookupHint mHint2;
					mHint.writeOut = true;
					
				sttfont_formatted_text subToken;
				int tokLen2Last = 0;
					
				for (size_t si = 0; si < thisTokenS.mItems.size(); ++si) {
					const SSF_STRING & s = thisTokenS.mItems[si].text;
					const uint32_t len = s.length();
					
					uint32_t seek = 0;
					uint32_t seekBefore = 0;
					
					while (seek < len) {
						seekBefore = seek;
						sttfont_font_cache::utf8_read(&s[seek], seek, len); // Look ahead and discard value
					
						sttfont_formatted_text subToken2 =  thisTokenS.extract(seekBefore+subWorkingLen, seek-seekBefore, &mHint2);
						subToken.append(std::move(subToken2));
						
						int tokLen2 = getTextWidth(subToken, &mHint);
						
						if (tokLen2 > xs) {
							//split!
							uint32_t splitPos = subWorkingLen + seekBefore;
							if (splitPos == 0) splitPos = 1;
							if (splitPos < len) {
								sttfont_formatted_text before = thisTokenS.extract(0, splitPos);
								sttfont_formatted_text after  = thisTokenS.extract(splitPos, -1);
								//std::cout << "here!!! ["<< thisTokenS.getString() <<"] (" << splitPos << "/" << thisTokenS.size() << ") before: [" << before.getString() << "], after: [" << before.getString() << "]" << std::endl;

								tokenised.insert(tokenised.begin() + ti + 1, std::move(after));
								tokenised[ti].swap(before);
								
								
								//std::cout << "here!!! [" << tokenised[ti].getString() << std::endl;
				//uint64_t TSPLIT = SDL_GetPerformanceCounter();
				//const double deltaTime = (double)((TSPLIT - TSTART)*1000 / (double)SDL_GetPerformanceFrequency() );
				//std::cout  << std::endl << "TokLen: [" << tokenised[ti].size() << "/" << tokenised[ti+1].size() << "],  Split time: " << deltaTime <<"ms" << " before: [" << tokenised[ti].getStringTruncated(64) << "] after: [" << tokenised[ti+1].getStringTruncated(64) << "] "<< std::endl << std::endl;
								//ti--;
								}
							
							tokLen = tokLen2Last;
							breakLongWord = true;
							goto breaken;
							}
						tokLen2Last = tokLen2;
						}
					subWorkingLen += len;
					}
				}
				
			// I told you this is ugly code. Look, it even has a Goto!
			breaken:
			
			//				std::cout << "breaken: [" << tokenised[ti].getString() << "] " << ti << "/" << tokenised.size() << " " << (workingLen + tokLen) << "/" << xs << std::endl;
			
			/////////////////////////////////////////////////////////////////////
			// Token for 
			//const sttfont_formatted_text & thisToken = tokenised[ti];
			
			bool isOverLength = (workingLen + tokLen > unsigned(xs));
			bool isLastPiece = (ti == tokenised.size()-1);
			
				
			if (isOverLength || isLastPiece || breakLongWord) {
				sttfont_formatted_text working;
				//bool first = true;
				unsigned int tokStride = 0;
				size_t limit = ti;
				if (!isOverLength)
					limit = ti+1;
					
				//bool isLastPiece2 = (limit == tokenised.size());
				for (size_t tj = lastInsert; tj < limit; ++tj) {
					//std::cout << "tok: [" << tokenised[tj].getString() << "] " << (tj+1 < limit ) << " " << tokStride << std::endl;
					working.append(std::move(tokenised[tj]));
					}
				//const bool trailingSpace = (!isLastPiece2) && (!breakLongWord);
				//if (trailingSpace)
				//	working << " ";
					
				working.consolidateSegments();
				
				if (breakPoints) {
					//if (isLastPiece)
					//tokStride = 0;
					iWorkingLen = working.size();
					
					//std::cout << "Insert B " << tokLen << "/" << Vgui_ContextI::aContext->getTextWidth(working) << "/" << xs << "\t[" << working.getString() << "], this piece: " << thisToken.getString() << ", arrSize: " << arrOut.size() << ", workingLen: " << iWorkingLen  << " workingLenLastBreak : " << iWorkingLenLastBreak << ", tokStride: " << tokStride << ", breakLongWord: " << breakLongWord << " isLastPiece2: " << isLastPiece2 << " trailingSpace: " << (trailingSpace) << std::endl << std::endl;
					
					breakPoints->push_back(sttfont_uintQuad(arrOut.size(), iWorkingLenLastBreak, iWorkingLen, tokStride));
					iWorkingLenLastBreak += iWorkingLen + tokStride;
					}
				arrOut.push_back(std::move(working));
				
				lastInsert = limit;
				if (isOverLength)
					ti--;
					
				workingLen = 0;
				//iWorkingLen = 0;
				}
			else {
				workingLen += tokLen + spaceLen;
				}
			
			//exit(1);
			}
		}
	
	void breakString (const SSF_STRING & stringIn, SSF_VECTOR<SSF_STRING> & arrOut, const int xs,
		const bool tokeniseNewLines = true, SSF_VECTOR<sttfont_uintQuad> * breakPoints = NULL) {
		sttfont_formatted_text sft;
		sft << stringIn;
		
		SSF_VECTOR<sttfont_formatted_text> arrTemp;
		breakString(sft, arrTemp, xs, tokeniseNewLines, breakPoints);
		arrOut.resize(arrTemp.size());
		for (uint32_t i = 0; i < arrTemp.size(); ++i) {
			if (arrTemp[i].isEmpty()) continue;
			arrOut[i].swap(arrTemp[i].mItems[0].text);
			}
		}
		 
	}
