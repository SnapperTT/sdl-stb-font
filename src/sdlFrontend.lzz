#hdr
// SdlStbFont example
// By Liam Twigger - 2020
// Public Domain

struct SDL_Renderer;
struct SDL_Texture;
struct SDL_Surface;

#end

#src
#ifndef SDL_STB_FONT_SDL_INCLUDED
	#include <SDL3/SDL.h>
#endif
#end

/// Prerended cached text
struct sdl_stb_prerendered_text : public sttfont_prerendered_text {
	SDL_Texture * mSdlTexture;
	SDL_Renderer * mRenderer;
	
	sdl_stb_prerendered_text () : sttfont_prerendered_text(), mSdlTexture(NULL), mRenderer(NULL) {}
	
	void freeTexture () {
		if (mSdlTexture)
			SDL_DestroyTexture(mSdlTexture);
		mSdlTexture = NULL;
		}
	
	/// Draws this prerendered text object, returns the x coordinate
	/// at the end of the drawing
	int draw (const int x, const int y) {
		SDL_FRect r;
		r.x = x;
		r.y = y;
		r.w = width;
		r.h = height;
		SDL_RenderTexture(mRenderer, mSdlTexture, NULL, &r);
		return r.x + r.w;
		}
		
	int drawWithColorMod(const int x, const int y, const uint8_t r, const uint8_t g, const uint8_t b, const uint8_t a = 255) {
		SDL_SetTextureColorMod(mSdlTexture, r, g, b);
		if (a != 255)
			SDL_SetTextureAlphaMod(mSdlTexture, a);
		return draw (x, y);
		}
	};
	

/// A glyph
struct sdl_stb_glyph : public sttfont_glyph {
	SDL_Texture * mSdlTexture;
	SDL_Surface * mSdlSurface;
	
	sdl_stb_glyph () : sttfont_glyph(), mSdlTexture(0), mSdlSurface(0) {}
	};
	
/// SDL Frontend
class sdl_stb_font_cache : public sttfont_font_cache {
public:
	SDL_Renderer * mRenderer;
	bool isRenderingToTexture;
	
	sdl_stb_font_cache () : sttfont_font_cache(), mRenderer(NULL), isRenderingToTexture(false) {}
	~sdl_stb_font_cache () {
		clearGlyphs();
		}
			
	SSF_MAP<uint64_t, sdl_stb_glyph> mGlyphs;
	
	void clearGlyphs () {
		for (auto & g : mGlyphs) {
			if (g.second.mSdlTexture) {
				SDL_DestroyTexture(g.second.mSdlTexture);
				g.second.mSdlTexture = NULL;
				}
			if (g.second.mSdlSurface) {
				SDL_DestroySurface(g.second.mSdlSurface);
				g.second.mSdlSurface = NULL;
				}
			}
		mGlyphs.clear();
		}
	
	/// Binds an SDL_Renderer for rendering
	/// Must be called before drawing any text
	void bindRenderer(SDL_Renderer * _mRenderer) {
		mRenderer = _mRenderer;
		}
	

	// Override - write 
	void genGlyph_writeData (const uint32_t codepoint, sttfont_glyph * gOut, unsigned char * bitmap2, int w, int h) {
		sdl_stb_glyph* gOut2 = (sdl_stb_glyph*) gOut;
		gOut2->mSdlSurface = SDL_CreateSurfaceFrom(w, h, SDL_PIXELFORMAT_RGBA32, bitmap2,  4*w);
		gOut2->mSdlTexture = SDL_CreateTextureFromSurface(mRenderer, gOut2->mSdlSurface);
		}
	
	sttfont_glyph * getGlyph(const uint64_t target) {
		auto it = mGlyphs.find(target);
		if (it == mGlyphs.end())
			return NULL;
		return &((*it).second);
		}
		
	sttfont_glyph * genGlyph_createAndInsert(const uint64_t target, const uint32_t codepoint, const uint8_t format) {
		sdl_stb_glyph g;
		genGlyph(codepoint, format, &g);
		mGlyphs[target] = g;
		return getGlyph(target);
		}
		
	void drawCodepoint (const sttfont_glyph * const GS, const int x, const int y, const uint32_t codepoint, const sttfont_format * const format, const uint8_t formatCode, const int kerningAdv, int & overdraw) {
		const sdl_stb_glyph * const G = (const sdl_stb_glyph * const) GS;
		// Draws the character
		if (G->mSdlTexture) {
			SDL_FRect r;
			r.x = x + G->xOffset;
			r.y = y + G->yOffset + baseline;
			r.w = G->width;
			r.h = G->height;
			
			// rgba = (r,g,b,0) <--- (r,g,b,a) correct!

			bool blendModeSuccess = false;
			
			// Texture bleeding is still being worked on
			// BLENDMODE NONE => no bleeding but negative kerning will override previous characters
			// BLENDMODE_BLEND => need to draw under the character to prevent bleeding
			// Todo Optimisation -> blendmode none if no negative kerning 
			//if (isRenderingToTexture) {
			//	//SDL_BlendMode bm = SDL_ComposeCustomBlendMode(SDL_BLENDFACTOR_SRC_ALPHA, SDL_BLENDFACTOR_DST_ALPHA, SDL_BLENDOPERATION_ADD, SDL_BLENDFACTOR_SRC_ALPHA, SDL_BLENDFACTOR_DST_ALPHA, SDL_BLENDOPERATION_MAXIMUM); // does not work in software
			//	SDL_SetTextureBlendMode(G->mSdlTexture, SDL_BLENDMODE_BLEND); // blendmode none = no bleeding of blank pixlels BUT will override
			//	}
		
			//if (format)
			//	if (format->format == sttfont_format::FORMAT_ITALIC)
			//		std::cout << "kerningAdv , " << kerningAdv << " " << G->xOffset << " char " << char(codepoint) << " wdith: " << (G->width ) << " advance: " <<(  G->advance) << std::endl;
		
			if (format) {
				int charAdv = kerningAdv + G->xOffset;
				bool isColoured = (format->r < 255) || (format->g < 255) || (format->b < 255);
				
				uint8_t cr,cg,cb,ca;
				if (isColoured || formatCode) {
					SDL_GetRenderDrawColor(mRenderer, &cr,&cg,&cb,&ca);
					if (isRenderingToTexture)
						SDL_SetRenderDrawBlendMode(mRenderer, SDL_BLENDMODE_NONE);
					SDL_SetRenderDrawColor(mRenderer, format->r, format->g, format->b, 0);
					// Remove bleeding pixels
					SDL_FRect r2;
					r2.x = r.x; r2.y = r.y;
					r2.w = r.w; r2.h = r.h;
					if (r2.x < overdraw) {
						int dx = overdraw - r2.x;
						r2.x += dx;
						r2.w -= dx;
						}
					overdraw = r.x + r.w;
					SDL_RenderFillRect(mRenderer, &r2); //TODO: prevent overlapping!
					SDL_SetRenderDrawBlendMode(mRenderer, SDL_BLENDMODE_BLEND);
					}
				if (formatCode)
					SDL_SetRenderDrawColor(mRenderer, format->r, format->g, format->b, 255);
				if (isColoured)
					SDL_SetTextureColorMod(G->mSdlTexture, format->r, format->g, format->b);
					
				SDL_RenderTexture(mRenderer, G->mSdlTexture, NULL, &r);
				
				if (formatCode & sttfont_format::FORMAT_STRIKETHROUGH) {
					SDL_FRect r2;
					r2.w = G->width+strikethroughThickness + charAdv; r2.h = strikethroughThickness;
					if (r2.h < 1) r2.h = 1;
					r2.x = r.x-strikethroughThickness/2 - charAdv; r2.y = y + strikethroughPosition;
					SDL_RenderFillRect (mRenderer, &r2);
					}
				if (formatCode & sttfont_format::FORMAT_UNDERLINE) {
					SDL_FRect r2;
					r2.w = G->width+underlineThickness + charAdv; r2.h = underlineThickness;
					if (r2.h < 1) r2.h = 1;
					r2.x = r.x-underlineThickness/2 - charAdv; r2.y = y + underlinePosition;
					SDL_RenderFillRect (mRenderer, &r2);
					}
				
				if (isColoured || formatCode) {
					SDL_SetRenderDrawColor(mRenderer, cr, cg, cb, ca);
					SDL_SetTextureColorMod(G->mSdlTexture, 255,255,255);
					}
				}
			else {
				if (isRenderingToTexture) {
					uint8_t cr,cg,cb,ca;
					SDL_GetRenderDrawColor(mRenderer, &cr,&cg,&cb,&ca);
					SDL_SetRenderDrawBlendMode(mRenderer, SDL_BLENDMODE_NONE);
					SDL_SetRenderDrawColor(mRenderer, cr, cg, cb, 0);
					
					// Remove bleeding pixels
					SDL_FRect r2;
					r2.x = r.x; r2.y = r.y;
					r2.w = r.w; r2.h = r.h;
					if (r2.x < overdraw) {
						int dx = overdraw - r2.x;
						r2.x += dx;
						r2.w -= dx;
						}
					overdraw = r.x + r.w;
					SDL_RenderFillRect(mRenderer, &r2); //TODO: prevent overlapping!
					
					SDL_SetRenderDrawColor(mRenderer, cr, cg, cb, ca);
					}
				else {
					overdraw = SSF_INT_MIN;
					}
				SDL_RenderTexture(mRenderer, G->mSdlTexture, NULL, &r);
				}
				
			//if (isRenderingToTexture)
			//	SDL_SetTextureBlendMode(G->mSdlTexture, SDL_BLENDMODE_BLEND);
			}
		}
		
	/// Creates a SDL_Texture of a suitable size and renders an entire string to it
	SDL_Texture * renderTextToTexture (const char * c, const uint32_t maxLen = -1, int * widthOut = NULL, int * heightOut = NULL) {
		return renderTextToTexture_worker(NULL, c, maxLen, widthOut, heightOut);
		}
	SDL_Texture * renderTextToTexture (const sttfont_formatted_text & formatted, int * widthOut = NULL, int * heightOut = NULL) {
		return renderTextToTexture_worker(&formatted, NULL, -1, widthOut, heightOut);
		}
protected:
	SDL_Texture * renderTextToTexture_worker (const sttfont_formatted_text * formatted, const char * c, const uint32_t maxLen = -1, int * widthOut = NULL, int * heightOut = NULL) {
		int width, height;
		if (formatted)
			getTextSize(width, height, *formatted);
		else
			getTextSize(width, height, c, maxLen);
		
		SDL_Texture * RT = SDL_CreateTexture(mRenderer, SDL_PIXELFORMAT_RGBA32, SDL_TEXTUREACCESS_TARGET, width, height);
		SDL_Texture * oldRT = SDL_GetRenderTarget(mRenderer);
		const bool isClipping = SDL_RenderClipEnabled(mRenderer);
		const bool oldIsRenderingToTexture = isRenderingToTexture;
		isRenderingToTexture = true;
		SDL_Rect oldScissor;
		if (isClipping) SDL_GetRenderClipRect(mRenderer, &oldScissor);
		SDL_SetRenderTarget(mRenderer, RT);
		//SDL_SetTextureBlendMode(RT, SDL_BLENDMODE_NONE);
		SDL_SetRenderDrawBlendMode(mRenderer, SDL_BLENDMODE_NONE);
		SDL_SetRenderDrawColor(mRenderer, 255, 255, 255, 0); // Must be the same colour as the text
		SDL_SetRenderDrawBlendMode(mRenderer, SDL_BLENDMODE_BLEND);
		// Fill RT with blank pixels. SDL_RenderClear will leave artefacts in SDL Software mode
		SDL_FRect r;
		r.x = 0; r.y = 0;
		r.w = width; r.h = height;
		SDL_RenderFillRect (mRenderer, &r); // Must be rendered with a fill rect
		
		SDL_SetTextureBlendMode(RT, SDL_BLENDMODE_BLEND);
		SDL_SetRenderDrawColor(mRenderer, 255, 255, 255, 255);
		if (formatted)
			drawText(0, 0, *formatted);
		else
			drawText(0, 0, c, maxLen);
		
		SDL_SetRenderTarget(mRenderer, oldRT);
		if (isClipping) SDL_SetRenderClipRect(mRenderer, &oldScissor);
		isRenderingToTexture = oldIsRenderingToTexture;
		
		*widthOut = width;
		*heightOut = height;
		return RT;
		}
public:
	SDL_Texture * renderTextToTexture (const SSF_STRING & str, int * widthOut = NULL, int * heightOut = NULL) {
		return renderTextToTexture(str.data(), str.length(), widthOut, heightOut);
		}
	
	/// Same as renderTextToTexture, but stores the result in an object that has a convienent 
	void renderTextToObject (sttfont_prerendered_text * textOut, const char * c, const uint32_t maxLen = -1) {
		sdl_stb_prerendered_text * textOut2 = (sdl_stb_prerendered_text*) textOut;
		textOut2->mSdlTexture = renderTextToTexture(c, maxLen, &(textOut->width), &(textOut->height));
		textOut2->mRenderer = mRenderer;
		}
	void renderTextToObject (sttfont_prerendered_text * textOut, const SSF_STRING & str) {
		sdl_stb_prerendered_text * textOut2 = (sdl_stb_prerendered_text*) textOut;
		textOut2->mSdlTexture = renderTextToTexture(str, &(textOut->width), &(textOut->height));
		textOut2->mRenderer = mRenderer;
		}
	void renderTextToObject (sttfont_prerendered_text * textOut, const sttfont_formatted_text & str) {
		sdl_stb_prerendered_text * textOut2 = (sdl_stb_prerendered_text*) textOut;
		textOut2->mSdlTexture = renderTextToTexture(str, &(textOut->width), &(textOut->height));
		textOut2->mRenderer = mRenderer;
		}
	
	
	}

