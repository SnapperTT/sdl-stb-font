#hdr
/// Used for when you want to have, eg, an Update thread and a Render thread
/// 
#ifndef SSF_MUTEX
	#define SSF_MUTEX std::mutex
	#include <mutex>
#endif

typedef uint32_t pcfc_handle;
struct producer_consumer_font_cache;

#ifdef SSF_CONCURRENT_QUEUE
	#define SSF_STATE_TRANSFER SSF_CONCURRENT_QUEUE<state_t*>
#else
	#define SSF_STATE_TRANSFER SSF_MUTEX mMutex; state_t
#endif
#end

struct pcfc_prerendered_text : public sttfont_prerendered_text {
	pcfc_handle handle;
	producer_consumer_font_cache * owner;
	
	void freeTexture() {
		if (owner)
			owner->destroyPrerender(handle);
		}
	}

class producer_consumer_font_cache : public sttfont_font_cache {
protected:
	// internal structs
	struct pcfc_consumer_prerendered_text : public sttfont_prerendered_text {
		pcfc_handle handle;
		sttfont_formatted_text text;
		
		pcfc_consumer_prerendered_text() {}
		}
		
	struct pcfc_formatted_text {
		sttfont_formatted_text text;
		int x, y;
		}
		
public:
	sttfont_font_cache* consumer_font_cache;
	
protected:
	// These members should be "protected", but making them public makes debugging easier
	pcfc_handle nextPrerenderTokenId;
	
	// Consumer thread stuff
	SSF_MAP<pcfc_handle, sttfont_prerendered_text*> prerenderMap;
	SSF_MAP<uint64_t, sttfont_glyph> mGlyphs;
	
	struct state_t {
		SSF_VECTOR<producer_consumer_font_cache::pcfc_consumer_prerendered_text> prerender;
		SSF_VECTOR<pcfc_handle> destroyPrerender;
		SSF_VECTOR<producer_consumer_font_cache::pcfc_formatted_text> text;
		void* userdata;
		
		state_t() : userdata(NULL) {}
		
		void swap(state_t & s) {
			prerender.swap(s.prerender);
			destroyPrerender.swap(s.destroyPrerender);
			text.swap(s.text);
			void * tmp = s.userdata;
			s.userdata = userdata;
			userdata = tmp;
			}
			
		void clear() {
			prerender.clear();
			destroyPrerender.clear();
			text.clear();
			userdata = NULL;
			}
		};
	
	state_t producerState;
	SSF_STATE_TRANSFER txQueue;
	state_t consumerState;
	
	pcfc_handle getNextPrerenderToken() {
		return nextPrerenderTokenId++;
		}
		
public:
	producer_consumer_font_cache() : consumer_font_cache(NULL), nextPrerenderTokenId(0) {}
	
	void freeStoredPrerenderedText(const bool freeTextures) {
		for (auto ppair : prerenderMap) {
			sttfont_prerendered_text* prt = ppair.second;
			if (!prt) continue;
			if (freeTextures) {
				prt->freeTexture();
				}
			SSF_DEL(prt);
			}
		prerenderMap.clear();
		}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Internal functions
	sttfont_glyph * getGlyph(const uint64_t target) {
		auto it = mGlyphs.find(target);
		if (it == mGlyphs.end())
			return NULL;
		return &((*it).second);
		}
		
	sttfont_glyph * genGlyph_createAndInsert(const uint64_t target, const uint32_t codepoint, const uint8_t format) {
		sttfont_glyph g;
		genGlyph(codepoint, format, &g);
		mGlyphs[target] = g;
		return getGlyph(target);
		}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Setup Functions (NOT thread safe -- you should use these on setup and then not after)
	
	void loadFontManagedBoth (sttfont_memory & memory, int index = 0) {
		sttfont_memory memory2;
		memory.cloneTo(memory2);
		
		consumer_font_cache->syncFrom(*this);
		consumer_font_cache->loadFontManaged(memory2, index);
		this->syncFrom(*consumer_font_cache);
		this->loadFontManaged(memory, index);
		}
		
	void addFontManagedBoth (sttfont_memory & memory, int index = 0) {
		sttfont_memory memory2;
		memory.cloneTo(memory2);
		
		consumer_font_cache->syncFrom(*this);
		consumer_font_cache->addFontManaged(memory2, index);
		this->syncFrom(*consumer_font_cache);
		this->addFontManaged(memory, index);
		}
		
	void addFormatFontManagedBoth (uint8_t formatMask, sttfont_memory & memory, int index = 0) {
		sttfont_memory memory2;
		memory.cloneTo(memory2);
		
		consumer_font_cache->syncFrom(*this);
		consumer_font_cache->addFormatFontManaged(formatMask, memory2, index);
		this->syncFrom(*consumer_font_cache);
		this->addFormatFontManaged(formatMask, memory, index);
		}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Producer Functions
	
	/// PushText - stores the text on the producer side and returns the handle
	/// Use submitToConsumer() to send to consumer side
	/// and call dispatchSingleText(handle) to draw		
	pcfc_handle pushText(const int x, const int y, const char* c, const uint32_t maxLen = -1, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp(c, maxLen);
		return pushText(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushText(const int x, const int y, const SSF_STRING & str, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp(str);
		return pushText(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushText(const int x, const int y, const sttfont_format format, const char* c, const uint32_t maxLen = -1, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp;
		tmp << format; tmp.appendCBuff(c, maxLen);
		return pushText(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushText(const int x, const int y, const sttfont_format format, const SSF_STRING & str, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp;
		tmp << format << str;
		return pushText(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushText(const int x, const int y, const sttfont_formatted_text & str, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		if (xOut || widthOut || heightOut) {
			int xx = processFormatted(str, x, y, false, widthOut, heightOut);
			if (xOut) *xOut = xx;
			}
		pcfc_formatted_text p;
		p.text = str;
		p.x = x;
		p.y = y;
		producerState.text.push_back(std::move(p));
		return producerState.text.size() - 1; 
		}
	
	void drawCodepoint (const sttfont_glyph * const GS, const int x, const int y, const uint32_t codepoint, const sttfont_format * const format, const uint8_t formatCode, const int kerningAdv, int & overdraw) {
		// This function should never be called for this frontend. Use pushText instead of drawText
		abort();
		}
	
	/// Creates a prerendered_text object and stores it internally.
	/// Draw with dispatchSinglePrerendered(((pcfc_prerendered_text*) textOut)->handle);
	void renderTextToObject (sttfont_prerendered_text * textOut, const char * c, const uint32_t maxLen = -1) {
		sttfont_formatted_text tmp(c, maxLen);
		renderTextToObject (textOut, tmp);
		}
	void renderTextToObject (sttfont_prerendered_text * textOut, const SSF_STRING & str) {
		sttfont_formatted_text tmp(str);
		renderTextToObject (textOut, tmp);
		}
	void renderTextToObject (sttfont_prerendered_text * textOut, const sttfont_formatted_text & str) {
		pcfc_prerendered_text* p = (pcfc_prerendered_text*) textOut;
		getTextSize(textOut->width, textOut->height, str);
		p->handle = getNextPrerenderToken();
		p->owner = this;
		
		pcfc_consumer_prerendered_text p2;
		p2.width = p->width;
		p2.height = p->height;
		p2.handle = p->handle;
		p2.text = str;
		
		producerState.prerender.push_back(p2);
		}
		
	void destroyPrerender(const pcfc_handle handle) {
		producerState.destroyPrerender.push_back(handle);
		}
		
	void pushUserdata(void* data) {
		producerState.userdata = data;
		}
		
	void submitToConsumer() {
		#ifdef SSF_CONCURRENT_QUEUE
			state_t * s = new state_t;
			s->swap(producerState);
			txQueue.enqueue(s);
		#else
			mMutex.lock();
			txQueue.clear();
			txQueue.swap(producerState);
			mMutex.unlock();
		#endif
		}
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Consumer Functions
	
	pcfc_handle pushTextConsumerSide(const int x, const int y, const char* c, const uint32_t maxLen = -1, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp(c, maxLen);
		return pushTextConsumerSide(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushTextConsumerSide(const int x, const int y, const SSF_STRING & str, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp(str);
		return pushTextConsumerSide(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushTextConsumerSide(const int x, const int y, const sttfont_format format, const char* c, const uint32_t maxLen = -1, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp;
		tmp << format; tmp.appendCBuff(c, maxLen);
		return pushTextConsumerSide(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushTextConsumerSide(const int x, const int y, const sttfont_format format, const SSF_STRING & str, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp;
		tmp << format << str;
		return pushTextConsumerSide(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushTextConsumerSide(const int x, const int y, const sttfont_formatted_text & str, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		if (xOut || widthOut || heightOut) {
			int xx = processFormatted(str, x, y, false, widthOut, heightOut);
			if (xOut) *xOut = xx;
			}
		pcfc_formatted_text p;
		p.text = str;
		p.x = x;
		p.y = y;
		consumerState.text.push_back(std::move(p));
		return consumerState.text.size() - 1; 
		}
	
	/// Returns true if something produced is received. Returns false if there is nothing to consume
	bool receiveFromProducer() {
		#ifdef SSF_CONCURRENT_QUEUE
			state_t * s = NULL;
			if (txQueue.try_dequeue(s)) {
				s->swap(consumerState);
				delete s;
				return true;
				}
			return false;
		#else
			consumerState.clear();
			mMutex.lock();
			consumerState.swap(txQueue);
			mMutex.unlock();
			return true;
		#endif
		}
	
	template <typename T>
	int dispatchPrerenderJobs() {
		// T is the sttfont_prerendered_text subclass that is used by consumer_font_cache
		int nDone = 0;
		for (pcfc_consumer_prerendered_text & p2 : consumerState.prerender) {
			auto itt = prerenderMap.find(p2.handle);
			if (itt != prerenderMap.end())
				abort(); // Idx reusued, this will leak memory
			T* t = SSF_NEW(T);
			consumer_font_cache->renderTextToObject(t, p2.text);
			prerenderMap[p2.handle] = t;
			nDone++;
			}
		consumerState.prerender.clear();
		return nDone;
		}
		
	template <typename T>
	int dispatchDestroy() {
		// T is the sttfont_prerendered_text subclass that is used by consumer_font_cache
		int nDone = 0;
		for (const pcfc_handle idx : consumerState.destroyPrerender) {
			auto itt = prerenderMap.find(idx);
			if (itt != prerenderMap.end()) {
				itt->second->freeTexture();
				SSF_DEL(itt->second);
				prerenderMap.erase(itt);
				nDone++;
				}
			}
		consumerState.destroyPrerender.clear();
		return nDone;
		}
		
	void dispatchSinglePrerendered(const pcfc_handle prtId, int x, int y) const {
		auto itt = prerenderMap.find(prtId);
		if (itt != prerenderMap.end()) {
			itt->second->draw(consumer_font_cache, x, y);
			}
		else {
			//std::cout << "Could not find prerendered text #" << prtId << std::endl;
			}
		}
		
		
	void dispatchSinglePrerenderedWColorMod(const pcfc_handle prtId, int x, int y, const int r, const int g, const int b, const int a) const {
		auto itt = prerenderMap.find(prtId);
		if (itt != prerenderMap.end()) {
			itt->second->drawWithColorMod(consumer_font_cache, x, y, r, g, b, a);
			}
		}
			
	void dispatchSingleText(const pcfc_handle texId) {
		if (texId < consumerState.text.size() && texId >= 0) {
			pcfc_formatted_text & pcf = consumerState.text[texId];
			consumer_font_cache->drawText(pcf.x, pcf.y, pcf.text);
			}
		}
		
	void* getUserdata() {
		return consumerState.userdata;
		}
		
	}
