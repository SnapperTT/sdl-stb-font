#hdr
/// Used for when you want to have, eg, an Update thread and a Render thread
/// 
#ifndef SSF_MUTEX
	#define SSF_MUTEX std::mutex
	#include <mutex>
#endif

typedef uint32_t pcfc_handle;
struct producer_consumer_font_cache;
#end

struct pcfc_prerendered_text : public sttfont_prerendered_text {
	pcfc_handle handle;
	producer_consumer_font_cache * owner;
	}

class producer_consumer_font_cache : public sttfont_font_cache {
protected:
	// internal structs
	struct pcfc_consumer_prerendered_text : public sttfont_prerendered_text {
		pcfc_handle handle;
		sttfont_formatted_text text;
		
		pcfc_consumer_prerendered_text() {}
		}
		
	struct pcfc_formatted_text {
		sttfont_formatted_text text;
		int x, y;
		}
		
public:
	sttfont_font_cache* consumer_font_cache;
	
protected:
	pcfc_handle nextPrerenderTokenId;
	SSF_MUTEX mMutex;
	
	// Consumer thread stuff
	SSF_MAP<pcfc_handle, sttfont_prerendered_text*> prerenderMap;
	
	// Producer thread stuff
	SSF_VECTOR<producer_consumer_font_cache::pcfc_consumer_prerendered_text> prerenderQueueProducer;
	SSF_VECTOR<producer_consumer_font_cache::pcfc_consumer_prerendered_text> prerenderQueueTx;
	SSF_VECTOR<producer_consumer_font_cache::pcfc_consumer_prerendered_text> prerenderQueueConsumer;
	
	SSF_VECTOR<pcfc_handle> destroyPrerenderQueueProducer;
	SSF_VECTOR<pcfc_handle> destroyPrerenderQueueTx;
	SSF_VECTOR<pcfc_handle> destroyPrerenderQueueConsumer;
	
	SSF_VECTOR<producer_consumer_font_cache::pcfc_formatted_text> textProducer;
	SSF_VECTOR<producer_consumer_font_cache::pcfc_formatted_text> textTx;
	SSF_VECTOR<producer_consumer_font_cache::pcfc_formatted_text> textConsumer;
	
	pcfc_handle getNextPrerenderToken() {
		return nextPrerenderTokenId++;
		}
		
public:

	producer_consumer_font_cache() : consumer_font_cache(NULL), nextPrerenderTokenId(0) {}
	
	void freeStoredPrerenderedText(const bool freeTextures) {
		for (auto ppair : prerenderMap) {
			sttfont_prerendered_text* prt = ppair.second;
			if (!prt) continue;
			if (freeTextures) {
				prt->freeTexture();
				}
			SSF_DEL(prt);
			prerenderMap.clear();
			}
		}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Setup Functions (NOT thread safe -- you should use these on setup and then not after)
	
	void loadFontManagedBoth (sttfont_memory & memory, int index = 0) {
		sttfont_memory memory2;
		memory.cloneTo(memory2);
		
		consumer_font_cache->syncFrom(*this);
		consumer_font_cache->loadFontManaged(memory2, index);
		this->syncFrom(*consumer_font_cache);
		this->loadFontManaged(memory, index);
		}
		
	void addFontManagedBoth (sttfont_memory & memory, int index = 0) {
		sttfont_memory memory2;
		memory.cloneTo(memory2);
		
		consumer_font_cache->syncFrom(*this);
		consumer_font_cache->addFontManaged(memory2, index);
		this->syncFrom(*consumer_font_cache);
		this->addFontManaged(memory, index);
		}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Producer Functions
	
	/// PushText - stores the text on the producer side and returns the handle
	/// Use submitToConsumer() to send to consumer side
	/// and call dispatchSingleText(handle) to draw		
	pcfc_handle pushText(const int x, const int y, const char* c, const uint32_t maxLen = -1, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp(c, maxLen);
		return pushText(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushText(const int x, const int y, const SSF_STRING & str, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		sttfont_formatted_text tmp(str);
		return pushText(x, y, tmp, xOut, widthOut, heightOut);
		}
		
	pcfc_handle pushText(const int x, const int y, const sttfont_formatted_text & str, int* xOut = NULL, int* widthOut = NULL, int* heightOut = NULL) {
		if (xOut || widthOut || heightOut) {
			int xx = processFormatted(str, x, y, false, widthOut, heightOut);
			if (xOut) *xOut = xx;
			}
		pcfc_formatted_text p;
		p.text = str;
		p.x = x;
		p.y = y;
		textProducer.push_back(std::move(p));
		return textProducer.size() - 1; 
		}
	
	void drawCodepoint (const sttfont_glyph * const GS, const int x, const int y, const uint32_t codepoint, const sttfont_format * const format, const uint8_t formatCode, const int kerningAdv, int & overdraw) {
		// This function should never be called for this frontend. Use pushText instead of drawText
		abort();
		}
	
	/// Creates a prerendered_text object and stores it internally.
	/// Draw with dispatchSinglePrerendered(((pcfc_prerendered_text*) textOut)->handle);
	void renderTextToObject (sttfont_prerendered_text * textOut, const char * c, const uint32_t maxLen = -1) {
		sttfont_formatted_text tmp(c, maxLen);
		renderTextToObject (textOut, tmp);
		}
	void renderTextToObject (sttfont_prerendered_text * textOut, const SSF_STRING & str) {
		sttfont_formatted_text tmp(str);
		renderTextToObject (textOut, tmp);
		}
	void renderTextToObject (sttfont_prerendered_text * textOut, const sttfont_formatted_text & str) {
		pcfc_prerendered_text* p = (pcfc_prerendered_text*) textOut;
		getTextSize(textOut->width, textOut->height, str);
		p->handle = getNextPrerenderToken();
		p->owner = this;
		
		pcfc_consumer_prerendered_text p2;
		p2.width = p->width;
		p2.height = p->height;
		p2.handle = p->handle;
		p2.text = str;
		
		prerenderQueueProducer.push_back(p2);
		}
		
	void destroyPrerender(const pcfc_handle handle) {
		destroyPrerenderQueueProducer.push_back(handle);
		}
		
protected:
	template <typename T>
	void submitWorker(SSF_VECTOR<T>& vSrc, SSF_VECTOR<T>& vDst) {
		if (!vDst.size())
			vDst.swap(vSrc);
		else {
			vDst.insert(vDst.end(), std::make_move_iterator(vSrc.begin()), std::make_move_iterator(vSrc.end()));
			vSrc.clear();
			}
		}
	
public:
	void submitToConsumer() {
		if (!(prerenderQueueProducer.size() || destroyPrerenderQueueProducer.size())) return; // nothing to submit
		mMutex.lock();
		submitWorker(prerenderQueueProducer, prerenderQueueTx);
		submitWorker(destroyPrerenderQueueProducer, destroyPrerenderQueueTx);
		submitWorker(textProducer, textTx);
		mMutex.unlock();
		}
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Consumer Functions
	
	void receiveFromProducer() {
		textConsumer.clear();
		mMutex.lock();
		prerenderQueueConsumer.swap(prerenderQueueTx);
		destroyPrerenderQueueConsumer.swap(destroyPrerenderQueueTx);
		textConsumer.swap(textTx);
		mMutex.unlock();
		}
	
	template <typename T>
	void dispatchPrerenders() {
		// T is the sttfont_prerendered_text subclass that is used by consumer_font_cache
		for (pcfc_consumer_prerendered_text & p2 : prerenderQueueConsumer) {
			auto itt = prerenderMap.find(p2.handle);
			if (itt != prerenderMap.end())
				abort(); // Idx reusued, this will leak memory
			T* t = SSF_NEW(T);
			consumer_font_cache->renderTextToObject(t, p2.text);
			prerenderMap[p2.handle] = t;
			}
		prerenderQueueConsumer.clear();
		}
		
	template <typename T>
	void dispatchDestroy() {
		// T is the sttfont_prerendered_text subclass that is used by consumer_font_cache
		for (const pcfc_handle idx : destroyPrerenderQueueConsumer) {
			auto itt = prerenderMap.find(idx);
			if (itt != prerenderMap.end()) {
				itt->second->freeTexture();
				SSF_DEL(itt->second);
				prerenderMap.erase(itt);
				}
			}
		}
		
	void dispatchSinglePrerendered(const pcfc_handle prtId, int x, int y) {
		auto itt = prerenderMap.find(prtId);
		if (itt != prerenderMap.end()) {
			itt->second->draw(x, y);
			}
		}
	
	void dispatchSingleText(const pcfc_handle texId) {
		if (texId < textConsumer.size() && texId >= 0) {
			pcfc_formatted_text & pcf = textConsumer[texId];
			consumer_font_cache->drawText(pcf.x, pcf.y, pcf.text);
			}
		}
		
	}
